if neobundle#tap('neosnippet')

function! neobundle#hooks.on_source(bundle)

  "   標準のスニペット群
  "    ~/.vim/bundle/neosnippet/autoload/neosnippet/snippets

  " ユーザー定義スニペット保存ディレクトリ
  let g:neosnippet#snippets_directory =
        \ expand('~/dotfiles.local/.vim/snippets,').expand('~/.vim/snippets')

  let g:neosnippet#enable_snipmate_compatibility = 1

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif

  "### キーマッピング
  " スニペット展開
  imap <C-y> <Plug>(neosnippet_expand_or_jump)
  smap <C-y> <Plug>(neosnippet_expand_or_jump)

  " スニペット展開
  " (スニペットが関係しないところでは行末まで削除)
  "imap <expr><C-k> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-o>D"
  "smap <expr><C-k> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-o>D"

  " <Up><Down>キーにて補完候補を移動
  inoremap <expr><Up> pumvisible() ? "\<C-p>" : "\<Up>"
  inoremap <expr><Down> pumvisible() ? "\<C-n>" : "\<Down>"

  " TAB
  imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump_or_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  " S-TAB
  imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

  " Enter
  " 補完候補が出ていたら確定、なければ改行
  "inoremap <expr><CR>  pumvisible() ? neocomplete#smart_close_popup()() : "\<CR>"
  " スニペット展開が可能なら展開、通常補完なら補完確定、それ以外は改行
  imap <expr><CR> neosnippet#expandable() ?
        \ '<Plug>(neosnippet_expand_or_jump)' : pumvisible() ?
        \ neocomplete#smart_close_popup() : '<CR>'

  " <CR>: close popup and save indent.
  " inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  " function! s:my_cr_function()
  "   return neocomplete#close_popup() . "\<CR>"
  "   " For no inserting <CR> key.
  "   "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
  " endfunction

  " Uniteでスニペットを表示
  imap <C-s>  i_<Plug>(neosnippet_start_unite_snippet)

  " ユーザ定義スニペットの編集
  "   引数にfiletypeを渡すことで任意のファイルを編集可能
  "   -runtime : Runtimeスニペットの編集
  nnoremap <Space>nse :NeoSnippetEdit

  xmap <silent>L     <Plug>(neosnippet_start_unite_snippet_target)
  "imap <silent>S     <Plug>(neosnippet_start_unite_snippet)
  xmap <silent>o     <Plug>(neosnippet_register_oneshot_snippet)

endfunction
call neobundle#untap()
endif

nnoremap <silent> [Window]f :<C-u>Unite neosnippet/user neosnippet/runtime<CR>

" vim: fdm=marker:
