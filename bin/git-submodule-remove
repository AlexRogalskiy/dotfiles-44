#!/bin/bash
# Recommend "git submodule deinit" from ver.1.8.3.
# http://takaaki-kasai-tech.blogspot.jp/2014/02/how-to-remove-git-submodule-using-each-version.html

set -u

function version {
    echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

prog=${0##*/}

if [ -z "$1" ]; then
    echo "$prog: specify a path to the submodule directory" 1>&2
    exit 1
fi

if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" != "true" ]; then
    echo "$prog: not a repository work tree: $PWD" 1>&2
    exit 1
fi

root="$(git rev-parse --show-toplevel 2> /dev/null)"
if [ "$PWD" != "$root" ]; then
  echo "$prog: must be run from the root of the work tree" 1>&2
  exit 1
fi

if ! git config --file .gitmodules --get "submodule.${1}.path" > /dev/null 2>&1; then
  echo "$prog: submodule not found: $1" 1>&2
  exit 1
fi

# git_dir="$PWD/$(git rev-parse --git-dir)"
git_ver=$(git --version | cut -d ' ' -f 3)

if [ $(version "$git_ver") -ge $(version 1.8.5) ]; then
    set -x
    git submodule deinit "$1" || exit 1
    git rm "$1" || exit 1
    rm -rf ".git/modules/${1}" || exit 1
    set +x
elif [ $(version "$git_ver") -ge $(version 1.8.3) ]; then
    set -x
    git submodule deinit "$1" || exit 1
    git config --file ".gitmodules" --remove-section "submodule.${1}" || exit 1
    git rm "$1" || exit 1
    rm -rf ".git/modules/${1}" || exit 1
    set +x
else
    set -x
    git config --file ".git/config" --remove-section "submodule.${1}" || exit 1
    git config --file ".gitmodules" --remove-section "submodule.${1}" || exit 1
    git rm --cached -rf "${1}" || exit 1
    rm -rf ".git/modules/${1}" || exit 1
    rm -rf "${1}" || exit 1
    set +x
fi

exit 0
