#!/bin/bash
#
#  Check git status in git repositories.
#
#    Usage:
#      $ git-check-status [directory...|target list file]
#

if ! type git > /dev/null 2>&1; then
    echo 'Error: Git is not installed' 2>&1
    exit 1
fi

submodule_status() {
    (
        cd "$(git rev-parse --show-toplevel)" >/dev/null 2>&1;
        local -a submodule_dirs
        IFS=$'\n' submodule_dirs=($(git submodule | cut -d ' ' -f 3 | sed 's/(.*)$//'))
        if [ -z "$submodule_dirs" ]; then
            return 0
        fi
        echo '{'
        for dir in "${submodule_dirs[@]}"; do
            print_sub_status "$dir"
        done
        echo '}'
    )
}

print_sub_status() {
    (
        cd "$1"
        echo "   - $1 ($(get_branch))"
        status=$(git status -s)
        [ -z "$status" ] && return 0
        status=$(echo "$status" | sed  's/\(.*\) \(.*\)/\\033[0;31m\1\\033[0;39m \2/g' | sed 's/^/      /g')
        echo -e "$status"
    )
}

get_branch () {
    # HEAD branch (e.g. refs/heads/<branch-name>)
    local head_branch=$(git symbolic-ref HEAD)
    if [ -z "$head_branch" ]; then
        git rev-parse --short HEAD
    else
        # Retrieve brach name (like master) from HEAD branch
        echo "$head_branch" | sed -E s/^.\{11\}//g
    fi
}

print_status() {
    (
        cd "$1"
        if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" != "true" ]; then
            return 1
        fi
        toplevel_path=$(git rev-parse --show-toplevel)
        echo "$toplevel_path ($(get_branch))"
        status=$(git status -s)
        [ -n "$status" ] && git status -s
        submodule_status
    )
    return 0
}

### Main ###

if [ $# -lt 1 ]; then
    echo '## git status -s'
    print_status '.'
    exit 0
fi

if [ $# -eq 1 -a -f "$1" ]; then
    echo "Read file \"${1}\"..."
    echo '## git status -s'
    for line in $(cat "$1"); do
        line=$(echo "$line" | sed "s%^~%$HOME%")
        for dir in $line; do
            if [ -d "$dir" ]; then
                print_status "$dir"
            elif [ ! -e "$dir" ]; then
                echo -e "\033[0;31mNot found!! : $dir\033[0;39m"
            fi
        done
    done
    exit 0
fi

echo '## git status -s'
for root_dir in "$@"; do
    [ -d "$root_dir" ] || continue
    print_status "$root_dir"
done

