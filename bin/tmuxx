#!/bin/bash

# attach to an existing tmux session, or create one if none exist
# also set up access to the system clipboard from within tmux when possible
#
# e.g.
# https://gist.github.com/1462391
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
# https://github.com/b4b4r07/dotfiles/blob/master/bin/tmuxx

if ! type tmux >/dev/null 2>&1; then
    echo 'ERROR: tmux command not found.' 2>&1
    exit 1
fi

if [[ -n "$SSH_CONNECTION" ]]; then
    echo "ERROR: ssh session already exists." 2>&1
    exit 1
fi

if [[ -n "$STY" ]]; then
    echo "ERROR: screen session has been already attached." 2>&1
    exit 1
fi

if [[ -n "$TMUX" ]]; then
    echo "ERROR: tmux session has been already attached." 2>&1
    exit 1
fi

if [[ "$UID" -eq 1 && "$1" != '-f' ]]; then
    echo "ERROR: Root user. Use tmuxx -f." 2>&1
    exit 1
fi

if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
    # detached session exists
    tmux list-sessions | perl -pe 's/(^.*?):/\033[31m$1:\033[m/'
    echo -n "Tmux: attach? (y/N num/session-name) "
    read
    if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
        tmux attach-session
        if [[ $? -eq 0 ]]; then
            echo "$(tmux -V) attached session."
            exit
        fi
    elif tmux list-sessions | grep -q "^$REPLY:"; then
        tmux attach -t "$REPLY"
        if [[ $? -eq 0 ]]; then
            echo "$(tmux -V) attached session."
            exit
        fi
    fi
fi

if [[ ( $OSTYPE == darwin* ) && ( -x $(which reattach-to-user-namespace 2>/dev/null) ) ]]; then
    # on OS X force tmux's default command to spawn a shell in the user's namespace
    tmux_config=$(cat "$HOME/.tmux.conf" <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
    tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X."
else
    tmux new-session && echo "$(tmux -V) created new session."
fi
