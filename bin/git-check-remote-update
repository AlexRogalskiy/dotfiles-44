#!/bin/bash
#
#  Check git remote update info in git repositories.
#
#    Usage:
#      $ git-check-remote-update [directory...|target list file]
#

if ! type git > /dev/null 2>&1; then
    echo 'Error: Git is not installed' 2>&1
    exit 1
fi

cmd_remote_update_info(){
    local remote_name=${1:-origin}
    echo "git remote show \"$remote_name\" \
        | tail -1 | sed 's/.*\((.*)\)/\1/' | tr '\n' ' ' \
        && git remote -v | head -1 | tr '\t' ' ' | cut -d' ' -f 2"
}

remote_update_info () {
    # HEAD branch (e.g. refs/heads/<branch-name>)
    local head_branch=$(git symbolic-ref HEAD)
    if [ -z "$head_branch" ]; then
        local prehash=$(git rev-parse --short HEAD)
        echo '(Not on any branch : prehash=$prehash)'
        return 1
    else
        # Retrieve brach name (like master) from HEAD branch
        local branch=$(echo "$head_branch" | sed -E s/^.\{11\}//g)
        # The remote name of HEAD branch (e.g. origin)
        local remote_name=$(git config branch."${branch}".remote)
        if [ -z "$remote_name" ]; then
            echo '(No remote repository)'
            return 1
        else
            eval $(cmd_remote_update_info "$remote_name")
        fi
    fi
}

submodule_update_info() {
    (
        cd "$(git rev-parse --show-toplevel)" >/dev/null 2>&1;
        local origin_status=$(git submodule foreach "$(cmd_remote_update_info)")
        if [ -n "$origin_status" ]; then
            echo "$origin_status" | sed '/^Entering/d' | sed 's/^/ - /g'
        fi
    )
}

print_update_info() {
    (
        cd "$1"
        if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" != "true" ]; then
            return 1
        fi
        toplevel_path=$(git rev-parse --show-toplevel)
        echo -n "$(remote_update_info)"
        echo " [$toplevel_path]"
        submodule_update_info
    )
}

### Main ###

if [ $# -lt 1 ]; then
    echo '## git remote show xxxx'
    print_update_info '.'
    exit 0
fi

if [ $# -eq 1 -a -f "$1" ]; then
    echo "Read file \"${1}\"..."
    echo '## git remote show xxxx'
    for dir in $(cat "$1"); do
        dir=$(echo "$dir" | sed "s%^~%$HOME%")
        [ -d "$dir" ] || continue
        print_update_info "$dir"
    done
    exit 0
fi

echo '## git remote show xxxx'
for root_dir in "$@"; do
    [ -d "$root_dir" ] || continue
    print_update_info "$root_dir"
done

