#!/bin/bash
#
#  Check git remote update info in git repositories.
#
#    Usage:
#      $ git-check-remote-update [directory...|target list file]
#

if ! type git > /dev/null 2>&1; then
    echo 'Error: Git is not installed' 2>&1
    exit 1
fi

## Common
get_branch () {
    # HEAD branch
    local head_branch=$(git symbolic-ref -q --short HEAD)
    if [ -z "$head_branch" ]; then
        local prehash=$(git rev-parse --short HEAD)
        echo "Not on any branch : prehash=$prehash"
        return 1
    fi
    echo "$head_branch"
}

get_remote_name () {
    local head_branch=$1
    # The remote name of HEAD branch (e.g. origin)
    local remote_name=$(git config branch."${head_branch}".remote)
    if [ -z "$remote_name" ]; then
        echo 'No remote repository'
        return 1
    fi
    echo "$remote_name"
}

cd_git_toplevel() {
    cd "$1"
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" != "true" ]; then
        return 1
    fi
    cd "$(git rev-parse --show-toplevel)" >/dev/null 2>&1
}

## Submodule
print_submodule_update_info() {
    (
        cd_git_toplevel "$1" || return 1
        local -a submodule_dirs
        IFS=$'\n' submodule_dirs=($(git submodule | cut -d ' ' -f 3 | sed 's/(.*)$//'))
        if [ -z "$submodule_dirs" ]; then
            return 0
        fi
        for sub_dir in "${submodule_dirs[@]}"; do
            echo " - $(print_remote_update_info "$sub_dir")"
        done
    )
}

## Remote
print_remote_update_info () {
    (
        local dir=$1
        cd_git_toplevel "$dir" || return 1

        local status
        local url

        local branch
        local merge_branch
        local remote_branch
        branch=$(get_branch)
        if [ $? -eq 0 ]; then
            remote_name=$(get_remote_name "$branch")
            if [ $? -eq 0 ]; then
                merge_branch=$(git config branch."$branch".merge | sed -E s/^.\{11\}//g)
                if [ -z "$merge_branch" ]; then
                    status='No merge branch'
                else
                    local remote_show=$(git remote show "$remote_name")
                    status=$(echo "$remote_show" \
                        | grep "^ *$merge_branch *pushes" | sed 's/.*(\(.*\)).*/\1/')
                    url=$(echo "$remote_show" | grep '^ *Push' | sed 's/^.*URL: \(.*\)$/\1/')
                    remote_branch=$(echo "$remote_show" \
                        | grep "^ *$merge_branch *pushes" | sed 's/.*pushes to \(.*\) (.*)/\1/' | tr -d ' ')
                fi
            else
                status=$remote_name
            fi
        else
            status=$branch
            branch=''
        fi
        if [ "$status" != "up to date" ]; then
            status="\033[0;31m$status\033[0;39m"
        fi
        local branch_info=''
        if [ -n "$branch" ]; then
            branch_info=$branch
            if [ -n "$merge_branch" ]; then
                branch_info="$branch_info:$merge_branch -> $remote_branch"
            fi
            branch_info="($branch_info)"
        fi

        local update_info="($status) [${dir%/}]$branch_info${url:+ URL: $url}"
        echo -e "$update_info"
    )
}

## Root function
print_update_info() {
    local dir=$1
    if [ ! -e "$dir" ]; then
        echo -e "\033[0;31mDirectory not found!! : $dir\033[0;39m"
        return 1
    elif [ ! -d "$dir" ]; then
        return 0
    fi
    print_remote_update_info "$dir" \
       && print_submodule_update_info "$dir"
}


### Main ###

if [ $# -lt 1 ]; then
    echo '## git remote show <remote name>'
    print_update_info '.'
    exit 0
fi

if [ $# -eq 1 -a -f "$1" ]; then
    echo "Read file \"${1}\"..."
    echo '## git remote show <remote name>'
    for line in $(cat "$1"); do
        line=$(echo "$line" | sed "s%^~%$HOME%")
        for dir in $line; do
            print_update_info "$dir"
        done
    done
    exit 0
fi

echo '## git remote show <remote name>'
for dir in "$@"; do
    print_update_info "$dir"
done

exit 0

