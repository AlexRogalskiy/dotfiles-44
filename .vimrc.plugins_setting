"-------------------------------------------------------------------------------
"  .vimrc.plugins_setting
"
"   Plugins settings
"
"-------------------------------------------------------------------------------

"### autodate.vim {{{
"  タイムスタンプの挿入 - 形式 Last Change:ドット
"  Kaoriya版ではデフォルト有効
"-------------------------------------------------
" フォーマット
let autodate_format="%Y/%m/%d %H:%M:%S"

"}}}


"### ag.vim {{{
"  :Ag [options] {pattern} [{directory}]
"  :bufdo AgAdd {pattern}
"  :LAg, LAgAdd
"  :AgFile
"  :AgHelp
"
"  If [!] is not given the first error is jumped to.
"
"   o    to open (same as enter)
"   go   to preview file (open but maintain focus on ack.vim results)
"   t    to open in new tab
"   T    to open in new tab silently
"   h    to open in horizontal split
"   H    to open in horizontal split silently
"   v    to open in vertical split
"   gv   to open in vertical split silently
"   q    to close the quickfix window
"-------------------------------------------------
" フォーマット
let g:agprg="ag -S --nogroup --column"
"}}}


"### closetag.vim {{{
" <C-_> 閉じタグ入力
:let g:closetag_html_style=1
" }}}


"### eregex.vim {{{
"  検索/置換にRubyやPerlの正規表現が使用できる
"  うまく動作しないので不可
"----------------------------------------------
"nnoremap / :M/
"nnoremap ? :M?
"nnoremap ,/ /
"nnoremap ,? ?

"}}}


"### Fugitive.vim {{{
"------------------------------------
" 現在のソースの変更点をvimdiffで表示
nnoremap <Space>gd :<C-u>Gdiff<Enter>
" 新しい窓を作ってgit statusを表示
nnoremap <Space>gs :<C-u>Gstatus<Enter>
" gitlogを表示
nnoremap <Space>gl :<C-u>Glog<Enter>
" 現在開いているソースをgit add
nnoremap <Space>ga :<C-u>Gwrite<Enter>
" staged なファイルがあれば git commit なければ git status
nnoremap <Space>gc :<C-u>Gcommit -v<Enter>
" git commit --amend
nnoremap <Space>gC :<C-u>Git commit -v --amend<Enter>
" 現在のソースをgit blame。vimが色づけしてくれる
nnoremap <Space>gb :<C-u>Gblame<Enter>

"}}}


"### Gitv {{{
"------------------------------------
" ブラウザモードで開く場合の画面分割方向
let g:Gitv_OpenHorizontal = 0
" Gitvを起動
nmap <leader>gv :<C-u>Gitv --all<cr>
nmap <leader>gV :<C-u>Gitv! --all<cr>
vmap <leader>gV :<C-u>Gitv! --all<cr>

"}}}


"### grep.vim {{{
"------------------------------------
" MacのxargsではRgrepがエラーになる
if has('mac')
  if executable('gxargs')
    let Grep_Xargs_Path = 'gxargs'
  else
    let Grep_Find_Use_Xargs = 0
  endif
endif

" :Gb <args> でGrepBufferする
command! -nargs=1 Gb :GrepBuffer <args>
" カーソル下の単語をGrepBufferする
nnoremap <C-g><C-b> :<C-u>GrepBuffer<Space><C-r><C-w><Enter>

" :Gr <args>でカレントディレクトリ以下を再帰的にgrepする
command! -nargs=1 Gr :Rgrep <args> *<Enter><CR>
" カーソル下の単語をgrepする
nnoremap <silent> <C-g><C-r> :<C-u>Rgrep<Space><C-r><C-w> *<Enter><CR>

" デフォルトで設定されるオプション
"  -i 大文字小文字を区別しない
"  -n 各行の先頭にファイルの行番号を表示します
"  -H ファイル名を表示
"  -E オプションは、拡張正規表現を使用する場合に指定
"     fgrep 正規表現を使わない検索
"     egrep 正規表現を使った検索 -E と同じ
"  -I バイナリ検索除外
:let Grep_Default_Options = '-niE'

" 検索外のディレクトリ、ファイルパターン
let Grep_Skip_Dirs = '.svn .git .hg'
let Grep_Skip_Files = '*.bak *~'

"}}}


"### gundo.vim {{{
"  undo履歴表示
"------------------------------------
nmap U :<C-u>GundoToggle<CR>
" 移動と同時にプレビューを表示しない
" r を押すとプレビュー表示
" 履歴表示が遅い場合に設定すると良い
"let g:gundo_auto_preview = 0

"}}}


"### HybridText {{{
autocmd BufEnter * if &filetype == "" | setlocal ft=hybrid | endif
" }}}


"### indent-guides {{{
"  インデント量の違いをハイライト表示
"-------------------------------------
" インデントガイドをトグルするキーバインド
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
" vim起動時の自動実行
let g:indent_guides_enable_on_vim_startup = 1
" 自動色付け
let g:indent_guides_auto_colors = 0
" インデントガイドの表示を開始するインデントレベル
let g:indent_guides_start_level = 2
" インデントガイドのサイズ(幅)
let g:indent_guides_guide_size = 1
" グラデーション設定(gvim only)
let g:indent_guides_color_change_percent = 30

"}}}


"### jscomplete-vim {{{
"------------------------------------
" DOMとMozilla関連とES6のメソッドを補完
let g:jscomplete_use = ['dom', 'moz', 'es6th']
" }}}


"### jQuery {{{
au BufRead,BufNewFile jquery.*.js setl ft=javascript syntax=jquery
"}}}


"### matchit.vim {{{
"  %コマンドによる対応括弧ジャンプ機能の拡張
"--------------------------------------------
runtime macros/matchit.vim
" 対応する括弧を追加
"let b:match_words = "if:endif,foreach:endforeach,\<begin\>:\<end\>"

"}}}


"### MiniBufExplorer {{{
"------------------------------------
" set minibfexp
let g:miniBufExplMapWindowNavVim=1 "hjklで移動
let g:miniBufExplSplitBelow=0  " Put new window above
let g:miniBufExplMapWindowNavArrows=1
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplModSelTarget=1
let g:miniBufExplSplitToEdge=1
let g:miniBufExplMaxSize = 10

" :MtでMiniBufExplorerの表示トグル
command! Mt :TMiniBufExplorer

"}}}


"### neocomplcache {{{
"------------------------------------
" 補完にneocomplcacheを使う
source ~/dotfiles/.vimrc.neocomplcache
"}}}


"### nerd_commenter.vim {{{
"------------------------------------
" コメントの間にスペースを空ける
let nerdspacedelims=1
"<leader>xでコメントをトグル(nerd_commenter.vim)
map <leader>x, c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let nerdshutup=1

"}}}


"### NERDTree {{{
"  ツリー型ファイルエクスプローラ
"  http://blog.livedoor.jp/kumonopanya/archives/51048805.html
"-------------------------------------------------------------
" 自動実行
let file_name = expand("%:p")
if has('vim_starting') &&  file_name == ""
    autocmd VimEnter * :NERDTreeToggle
endif

" トグル
"nmap <F5> :TMiniBufExplorer<CR>:NERDTreeToggle<CR>:TMiniBufExplorer<CR>
" To duplicate number-marks mapping
autocmd Filetype * nmap <F5> :NERDTreeToggle<CR>

" ツリー表示幅
"let g:NERDTreeWinSize=31

" 無視するファイルを設定
" \ エスケープ記号
" $ ファイル名の最後
let g:NERDTreeIgnore=['\.clean$', '\.swp$', '\.bak$', '\~$']

" 隠しファイル表示
let g:NERDTreeShowHidden=1
" ツリー上部のヘルプ表示(0:表示)
let g:NERDTreeMinimalUI=0
" ツリーに矢印などを表示するか(0:表示)
let g:NERDTreeDirArrows=0

"マウス操作方法
" 1 : ファイル、ディレクトリ両方共ダブルクリックで開く(default)
" 2 : ディレクトリのみシングルクリックで開く
" 3 : ファイル、ディレクトリ両方共シングルクリックで開く
let g:NERDTreeMouseMode=1
"}}}


"### number-marks {{{
map <silent> <unique> mm <Plug>Place_sign
map <silent> <unique> mb <Plug>Goto_next_sign
map <silent> <unique> mv <Plug>Goto_prev_sign
map <unique> mD <Plug>Remove_all_signs
map <silent> <unique> m. <Plug>Move_sign
" }}}


"### open-browser.vim {{{
" カーソルの下のURLを開くor単語を検索エンジンで検索
"---------------------------------------------------
" カーソル下のURLをブラウザで開く
" URLがない場合は単語を検索する
nmap <Leader>ob <Plug>(openbrowser-smart-search)
vmap <Leader>ob <Plug>(openbrowser-smart-search)

" カーソル下のURLをブラウザで開く
"nmap <Leader>fu <Plug>(openbrowser-open)
"vmap <Leader>fu <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
" nnoremap <Leader>fs :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

"}}}


"### python {{{
"------------------------------------
" Pydiction
"  辞書補完
"------------------------------------
"let g:pydiction_location = '~/.vim/pydiction/complete-dict'
"let g:pydiction_location = '~/.vim/bundle/Pydiction/complete-dict'

"------------------------------------
" pythoncomplete
"  オムニ補完
"------------------------------------
"setlocal omnifunc=pythoncomplete#Complete
" オムに補完はpython-mode(RopeOmni)を使用

"------------------------------------
" python-mode
"  https://github.com/klen/python-mode
"  :help PythonModeOptions
"  :help PythonModeKeys
"  :help ropevim.txt
"------------------------------------
" ## Run python
" Load run code plugin
let g:pymode_run = 0
" Key for run python code
let g:pymode_run_key = '<Leader>r'

" ## Show documentation
" Load show documentation plugin
let g:pymode_doc = 0
" Key for show python documentation
let g:pymode_doc_key = 'K'

" ## Lint
" Load pylint code plugin
let g:pymode_lint = 1
" Disable pylint checking every save
let g:pymode_lint_write = 1
" Switch pylint, pyflakes, pep8, mccabe code-checkers
let g:pymode_lint_checker = "pep8,pyflakes,mccabe"
" on django
"let g:pymode_lint_cheker = "pylint"

" ## Window
" Hold cursor in current window
" when quickfix is open
let g:pymode_lint_hold = 0
" Minimal height of pylint error window
let g:pymode_lint_minheight = 3
" Maximal height of pylint error window
let g:pymode_lint_maxheight = 6
" Hold cursor in current window
" when quickfix is open
let g:pymode_lint_hold = 0

" ## Foldin
" Enable python folding
let g:pymode_folding = 1

" ## Rope
" Load rope plugin
let g:pymode_rope = 0
" Auto create and open ropeproject
let g:pymode_rope_auto_project = 0

" ## etc
" Auto fix vim python paths if virtualenv enabled
let g:pymode_virtualenv = 1


"------------------------------------
" jedi-vim
"  https://github.com/davidhalter/jedi-vim
"------------------------------------
let g:jedi#goto_command = "<leader>gt"
let g:jedi#get_definition_command = "<leader>d"
let g:jedi#pydoc = "<space>K"
let g:jedi#rename_command = "<leader>R"
let g:jedi#related_names_command = "<leader>n"
let g:jedi#popup_on_dot = 0

"}}}


"### quickrun {{{
"------------------------------------
" デフォルトのキーマップを無効
let g:quickrun_no_default_key_mappings = 1
" 通常実行
nmap <Leader>r <Plug>(quickrun)
" 実行後フォーカスをQuickFixへ
nmap <Leader>R <Plug>(quickrun)<C-w><C-w>
" 引数付き実行
command! -nargs=+ QR :QuickRun '-args' <q-args>

" q/ESCでウィンドウを閉じる
autocmd FileType quickrun nnoremap <buffer> q :q<CR>
autocmd FileType quickrun nnoremap <buffer> <ESC> :q<CR>

" コンフィグ設定
" 常に横分割
" markdownについて
"  htmlを開くデフォルトアプリケーションがブラウザの場合は
"   'outputter': 'multi:buffer:browser'
"  とすることでブラウザにて開くことができる
let g:quickrun_config = {
      \   '_': {
      \     'split': '',
      \   },
      \   'markdown': {
      \     'type': executable('markdown') ? 'markdown/markdown':
      \             executable('Markdown.pl') ? 'markdown/Markdown.pl':
      \             executable('kramdown') ? 'markdown/kramdown':
      \             executable('bluecloth') ? 'markdown/bluecloth':
      \             executable('redcarpet') ? 'markdown/redcarpet':
      \             executable('pandoc') ? 'markdown/pandoc':
      \             executable('markdown_py') ? 'markdown/markdown_py': '',
      \   },
      \   'markdown/markdown': {
      \     'split': winwidth(0) < winheight(0) * 3  ? "" : "vertical",
      \     'command': 'markdown',
      \     'cmdopt': '--html4tags',
      \     'args': '| tee /tmp/__markdown_for_quickrun.html; open -a Google\ Chrome /tmp/__markdown_for_quickrun.html',
      \     'outputter': 'multi:buffer',
      \   },
      \   'watchdogs_checker/_' : {
      \     'runner/vimproc/updatetime' : 40,
      \     'hook/copen/enable_exist_data' : 0,
      \     'hook/unite_quickfix/enable_exit' : 0,
      \     'hook/quickfix_stateus_enable/enable_exit' : 1,
      \     'hook/hier_update/enable_exit' : 1,
      \     'hook/back_buffer/enable_exit' : 0,
      \     'hook/back_tabpage/enable_exit' : 0,
      \     'hook/back_window/enable_exit' : 1,
      \     'hook/close_quickfix/enable_exit' : 0,
      \     'hook/close_unite_quickfix/enable_exit' : 0,
      \     'hook/quickfix_replate_tempname_to_bufnr/enable_exit' : 1,
      \     'hook/quickfix_replate_tempname_to_bufnr/priority_exit' : -10,
      \   },
      \   "python/watchdogs_checker" : {
      \      "type" : "watchdogs_checker/flake8",
      \   },
      \   "watchdogs_checker/pyflakes" : {
      \      "command" : "pyflakes",
      \      "exec"    : "%c %o %s:p",
      \   },
      \   "watchdogs_checker/flake8" : {
      \      "command" : "flake8",
      \      "exec"    : "%c %o %s:p",
      \      "quickfix/errorformat" : "%E%f:%l: could not compile,%-Z%p^,%E%f:%l:%c: %m,%W%f:%l: %m,%-G%.%#",
      \   },
      \   "coffee/watchdogs_checker" : {
      \      "type" : "watchdogs_checker/coffeelint",
      \   },
      \    "javascript/watchdogs_checker" : {
      \      "type" : "watchdogs_checker/gjslint",
      \      "cmdopt" : " --nosummary --unix_mode --nodebug_indentation --nobeep",
      \   },
      \    "watchdogs_checker/gjslint" : {
      \      "command" : "gjslint",
      \      "exec"    : "%c %o %s:p",
      \      "quickfix/errorformat" : "%f:%l:(New Error -%\\?\%n) %m,%f:%l:(-%\\?%n) %m,%-G1 files checked, no errors found.,%-G%.%#",
      \   },
      \ }
"}}}


"### quickfixsigns_vim {{{
let g:quickfixsigns_classes = ['qfl', 'loc', 'breakpoints']
"}}}


"### showmarks.vim {{{
"  <Leader>mt ON/OFFトグル
"  <Leader>mo Forces ShowMarks on.
"  <Leader>mm 次の使えるマークを使ってマーク
"  <Leader>mh カレント行ののマークを削除
"  <Leader>ma カレントバッファのマークを全部削除
"----------------------------------------------------
" Enable ShowMarks
let showmarks_enable = 1
" Show which marks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

" マークを表示しない
"   - h : Help
"   - m : Non-modifiable
"   - p : Preview
"   - q : Quickfix
"   - r : Readonly
let showmarks_ignore_type = "hmq"

" Hilight lower & upper marks
"let showmarks_hlline_lower = 1
"let showmarks_hlline_upper = 1

" Highlighting
highlight ShowMarksHLl cterm=NONE ctermfg=blue ctermbg=black gui=NONE guifg=blue guibg=black
highlight ShowMarksHLu cterm=NONE ctermfg=blue ctermbg=lightyellow gui=NONE guifg=blue guibg=black
highlight ShowMarksHLo cterm=NONE ctermfg=blue ctermbg=black gui=NONE guifg=blue guibg=black
highlight ShowMarksHLm cterm=bold ctermfg=blue ctermbg=black gui=NONE gui=bold guifg=blue guibg=black

"}}}


"### Simple-Javascript-Indenter {{{
"------------------------------------
" shiftwidthを1にしてインデント
let g:SimpleJsIndenter_BriefMode = 1
" switchのインデント改善
let g:SimpleJsIndenter_CaseIndentLevel = -1
" }}}


" ### sumartword {{{
"   単語移動がスマートに
"------------------------------------
map W   <Plug>(smartword-w)
map B   <Plug>(smartword-b)
map E   <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)

" }}}


"### smooth_scroll {{{
"  スクロールをスムーズに
"------------------------------------
" <PageDown>と<PageUp>もスムーズスクロール
" Macだと正常に動かない
"nnoremap <PageDown> <C-f>
"nnoremap <PageUp> <C-b>
" スクロール速度
"let g:scroll_factor=20000

"}}}


"### sudo.vim {{{
"  root権限でファイルを編集、保存
"------------------------------------
" root権限で今開いているファイルを開き直す
command! ES :e sudo:%<CR><C-^>:bd!
" root権限で保存
command! WS :w sudo:%

"}}}


"### surround.vim {{{
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
"nmap S <Plug>Ysurround
"nmap SS <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
"let g:surround_{char2nr("-")} = ":\r"

"}}}


"### Syntastic {{{
"  Syntastic が使用するコマンド
"   http://d.hatena.ne.jp/heavenshell/20120109/1326089510
"  実行：,s
"  自動実行のトグル：,S
"  エラー一覧(QiuickFix)表示：,e
"------------------------------------
" シンタックスチェックを実行
nnoremap <silent> <Leader>s :SyntasticCheck<CR>
" シンタックスチェックのモードをトグル(active/passive)
nnoremap <silent> <Leader>S :SyntasticToggleMode<CR>
" QuickFixによるエラー一覧表示
nnoremap <silent> <Leader>e :Errors<CR>

" エラー行をsignで表示
let g:syntastic_enable_signs = 1
" エラーバルーン表示 (gvim only)
let g:syntastic_enable_balloons =1
" エラーhighligt表示
let g:syntastic_enable_highlighting = 1
" エラー時にquickfix起動
let g:syntastic_auto_loc_list = 1

" Automatically running
"   mode(active/passive)
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'php', 'perl'],
      \ 'passive_filetypes': ['python', 'html', 'coffee', 'javascript'] }

" python
let g:syntastic_python_checkers = [ "flake8", "pyflakes" ]
" javascript
let g:syntastic_javascript_checkers = [ "gjslint", "jshint" ]
" coffee
let g:syntastic_coffee_checkers = [ "coffeelint", "coffee" ]
"}}}


"### switch.vim {{{
"------------------------------------
" CamelCase <-> SneakCase
let g:variable_style_switch_definitions = [
  \   {
  \     '\<[a-z0-9]\+_\k\+\>': {
  \       '_\(.\)': '\U\1'
  \     },
  \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
  \       '\([A-Z]\)': '_\l\1'
  \     },
  \   }
  \ ]

let g:switch_custom_definitions =
  \ [
  \   ['and', 'or'],
  \   ['if', 'unless'],
  \   ['yes', 'no'],
  \   ['enable', 'disable'],
  \   ['pick', 'reword', 'fixup', 'squash', 'edit', 'exec'],
  \ ]
nnoremap <silent> + :call switch#Switch(g:variable_style_switch_definitions)<cr>
nnoremap <silent> - :Switch<cr>
"}}}


"### TweetVim {{{
"------------------------------------
if has('gui_running')
  " フレームにアイコンを表示
  let g:tweetvim_display_icon = 1
endif

" 1ページのツイート数
let g:tweetvim_tweet_per_page = 60

nnoremap <silent><Space>tw :<C-u>tabnew <Bar> TweetVimHomeTimeline<CR>
nnoremap <silent><Space>tl :<C-u>TweetVimHomeTimeline<CR>
nnoremap <silent><Space>tm :<C-u>TweetVimMentions<CR>
nnoremap <Space>ts :<C-u>TweetVimSay<CR>

"}}}


"### unite.vim {{{
"------------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
xnoremap    [unite]   <Nop>
nmap    ;f   [unite]
xmap    ;f   [unite]

" 入力モードで開始する
let g:unite_enable_start_insert = 1

" Uniteを開く時、垂直分割で開く
let g:unite_enable_split_vertically=1

"nnoremap [unite]u  :<C-u>Unite -no-split<Space>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite buffer file_mru<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -buffer-name=files file<CR>
" ファイル一覧 (現在のバッファのカレントディレクトリ配下)
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite buffer<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite file_mru<CR>
" 最近使用したファイル一覧 (カレントディレクトリ)
"nnoremap <silent> [unite]m  :<C-u>UniteWithBufferDir file_mru<CR>

" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" dotfiles以下のファイルを表示
command! UFD :Unite file:~/dotfiles -input=. -no-start-insert -winwidth=60

call unite#custom_filters('file_rec', ['converter_relative_word', 'matcher_default', 'sorter_default', 'converter_relative_abbr'])

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  " 入力モードを抜ける
  imap <buffer> jj      <Plug>(unite_insert_leave)
  " 入力モード時のプレビュー
  nnoremap <silent><buffer> <C-p> :<C-u>call unite#mappings#do_action('preview')<CR>
  " 単語単位からパス単位で削除するように変更
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " ファイルを開く(ウィンドウ横分割)
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ファイルを開く(ウィンドウ縦分割)
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

" 最近使ったファイルの数
let g:unite_source_file_mru_limit = 200

" ----- unite-plugins -----
" unite-line
" uniteでバッファ内検索//
"  <C-u> 余計な文字が入っていた場合に行頭まで削除することで正常に動作させる
command! UL :Unite -buffer-name=search -start-insert -no-quit line


" unite-grep
"  Targetに-Rを入れることで再帰検索可能
" キーマップ
command! UG :Unite -no-start-insert -buffer-name=search -no-quit grep
" grepデフォルトオプション
"  -i 大文字小文字を区別しない
"  -n 各行の先頭にファイルの行番号を表示します
"  -H ファイル名を表示
"  -E オプションは、拡張正規表現を使用する場合に指定
"     fgrep 正規表現を使わない検索
"     egrep 正規表現を使った検索 -E と同じ
"  -R ディレクトリを再帰的にたどる
"  -I バイナリ検索除外
"  -w 単語マッチ
"  --color=[WHEN]
"     always: パイプ使用時に強制的にカラーコードをつける
"     auto : 出力先に応じて判断 - パイプ時などはカラーコードをつけない
"     never : カラーコードOFF
let g:unite_source_grep_default_opts="-niE --color=never"

" For ag
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '-S --nocolor --nogroup'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_max_candidates = 200
endif


" unite-help
command! UH :Unite help
" カーソル上の単語をunite-helpで検索
command! UHW :UniteWithCursorWord help


" unite-outline
command! UO :Unite -no-start-insert -winwidth=40 -no-quit outline


" unite-colorscheme
command! UC :Unite -auto-preview -no-start-insert -winwidth=15 colorscheme

" unite-mapping
command! UM :Unite -no-start-insert mapping

" }}}


"### vim-coffee-script {{{
"------------------------------------
"autocmd BufWritePost *.coffee silent CoffeeMake! -cb | cwindow | redraw!
"autocmd BufWritePost *.coffee :CoffeeCompile watch vert
" }}}


"### vim-gitgutter {{{
"------------------------------------
nnoremap <silent> ]v :GitGutterNextHunk<CR>
nnoremap <silent> [v :GitGutterPrevHunk<CR>
" }}}


"### vim-hier {{{
"------------------------------------
" エラーを赤字の波線で
" 警告を青字の波線で
highlight qf_error_ucurl gui=undercurl guisp=red ctermfg=none cterm=undercurl
highlight qf_warning_ucurl gui=undercurl guisp=blue ctermfg=none cterm=undercurl

let g:hier_highlight_group_qf  = "qf_error_ucurl"
let g:hier_highlight_group_qfw = "qf_warning_ucurl"

" ハイライト箇所を更新
nnoremap <silent> <Leader>hiu :HierUpdate<CR>
" ハイライトを削除
nnoremap <silent> <Leader>hic :HierClear<CR>

"}}}


"### vim-less-autocompile {{{
"------------------------------------
"自動で変換
let g:less_autocompile=1
"圧縮しない
let g:less_compress=0
" }}}


"### vim-nodejs-complete {{{
"  Close the method preview window.
"    ctrl-w_ctrl-z or :pc
"  Clear the chache for node modules.
"   :unlet b:npm_module_names
"------------------------------------
let g:nodejs_complete_config = {
\  'js_compl_fn': 'javascriptcomplete#CompleteJS',
\  'max_node_compl_len': 15
\}
" automatically open and close the popup menu / preview window
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
" }}}


"### viw-operator-replace {{{
"------------------------------------
map R  <Plug>(operator-replace)
nmap cp <Plug>(operator-replace)iw
nmap vp <Plug>(operator-replace)iw
" }}}


"### vim-powerline {{{
"------------------------------------
if has("mac")
  " フォントにパッチを当てないなら以下をコメントアウト
  let g:Powerline_symbols = 'fancy'
endif

"let g:Powerline_stl_path_style = 'full'

"let g:Powerline_theme = 'solarized256'
"let g:Powerline_colorscheme = 'solarized256'

call Pl#Theme#InsertSegment('charcode', 'before', 'fileformat')
" }}}


"### vim-ref {{{
"------------------------------------
" PHPマニュアルのパスを指定
let g:ref_phpmanual_path = $HOME . '/work/dev/docs/php-chunked-xhtml'

" Javadocのパスを指定
let g:ref_javadoc_path = $HOME . '/work/dev/docs/java6_ja_apidocs'

" jqueryリファレンスのパスを指定
let g:ref_jquery_doc_path = $HOME . '/work/dev/docs/jqapi-latest'

" javascriptリファレンスのパスを指定
let g:ref_javascript_doc_path = $HOME . '/work/dev/docs/jsref/htdocs'

" ref-sourcesにてキャッシュを有効
let g:ref_use_cache = 1

autocmd FileType ref call s:initialize_ref_viewer()
function! s:initialize_ref_viewer()
  nmap <buffer> b <Plug>(ref-back)
  nmap <buffer> f <Plug>(ref-forward)
  nnoremap <buffer> q <C-w>c
  "setlocal nonumber
endfunction
"}}}


"### vim-seek {{{
"------------------------------------
"let g:seek_no_default_key_mappings = 1
"nmap <silent> s <Plug>(seek-seek)
"omap <silent> s <Plug>(seek-seek)
"nmap <silent> S <Plug>(seek-back)
"omap <silent> S <Plug>(seek-back)
"omap <silent> x <Plug>(seek-seek-cut)
"omap <silent> X <Plug>(seek-back-cut)
"omap <silent> j <Plug>(seek-jump)
"omap <silent> J <Plug>(seek-jump-back)
" }}}


"### vim-watchdogs {{{
"  シンタックスチェックを実行
"    :WatchdogsRun
"  チェッカーを指定して実行
"    :WatchdogsRun watchdogs_checker/g++
"  :QuickRun と同様の引数を渡す
"    :WatchdogsRun watchdogs_checker/g++ -cmdopt -Wall
"------------------------------------

" 自動実行
" 全てのfiletypeを有効
"let g:watchdogs_check_BufWritePost_enable = 1
" filetype毎に指定
let g:watchdogs_check_BufWritePost_enables = {
\  'c'          : 0,
\  'coffee'     : 1,
\  'cpp'        : 0,
\  'javascript' : 1,
\  'perl'       : 1,
\  'php'        : 1,
\  'python'     : 0,
\  'ruby'       : 1,
\  'sass'       : 1,
\  'scss'       : 1,
\}

" 一定時間キー入力がなかった場合にシンタックスチェックを行う
" バッファに書き込み後、1度だけ行われる
"let g:watchdogs_check_CursorHold_enable = 1
"let g:watchdogs_check_CursorHold_enables = {
"\  "haskell" : 1,
"\}

call watchdogs#setup(g:quickrun_config)
" }}}


"### VTreeExplorer {{{
"  ツリー状にファイルやディレクトリの一覧を表示
"  NERDTreeを使用するので削除
"------------------------------------
" 縦分割で表示
"let g:treeExplVertical=1
" <Leader>t<Space>でディレクトリツリー表示
"noremap <Leader>t<Space> :VSTreeExplore<CR>
" 分割したウィンドウのサイズ
"let g:treeExplWinSize=30
" 隠しファイルを表示
"let g:treeExplHidden=1

"}}}


"### YankRing.vim {{{
"------------------------------------
" 通常版のvimでは以下の設定にしないとペースト時にエラーが出る
if ! has("kaoriya")
  let g:yankring_manual_clipboard_check = 0
endif
" 履歴保存先を変更(デフォルトだと隠しファイルにならないため)
let g:yankring_history_file = ".yankring_history"
" Yankの履歴参照
nmap ,y :YRShow<CR>
" ヤンク履歴についかする最少文字数(1文字は対象外)
let g:yankring_min_element_length = 2

"}}}


"### zencoding.vim {{{
"------------------------------------
let g:user_zen_removetag_key = ''
let g:use_zen_complete_tag = 1
let g:user_zen_settings = {
\  'lang' : 'ja',
\  'html' : {
\    'filters' : 'html',
\    'snippets' : {
\      'jq' : "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\n<script>\n\\$(function() {\n\t|\n})()\n</script>",
\      'cd' : "<![CDATA[|]]>",
\    },
\  },
\  'perl' : {
\    'aliases' : {
\      'req' : "require '|'"
\    },
\    'snippets' : {
\      'use' : "use strict\nuse warnings\n\n",
\      'w' : "warn \"${cursor}\";",
\    },
\  },
\  'php' : {
\    'extends' : 'html',
\    'filters' : 'html,c',
\  },
\  'javascript' : {
\    'snippets' : {
\      'jq' : "\\$(function() {\n\t\\${cursor}\\${child}\n});",
\      'jq:json' : "\\$.getJSON(\"${cursor}\", function(data) {\n\t\\${child}\n});",
\      'jq:each' : "\\$.each(data, function(index, item) {\n\t\\${child}\n});",
\      'fn' : "(function() {\n\t\\${cursor}\n})();",
\      'tm' : "setTimeout(function() {\n\t\\${cursor}\n}, 100);",
\    },
\    'use_pipe_for_cursor' : 0,
\  },
\  'css' : {
\    'filters' : 'fc',
\    'snippets' : {
\      'box-shadow' : "-webkit-box-shadow: 0 0 0 # 000;\n-moz-box-shadow: 0 0 0 0 # 000;\nbox-shadow: 0 0 0 # 000;",
\    },
\  },
\  'less' : {
\    'filters' : 'fc',
\    'extends' : 'css',
\  },
\ 'java' : {
\  'snippets' : {
\   'main': "public static void main(String[] args) {\n\t|\n}",
\   'println': "System.out.println(\"|\");",
\   'class': "public class | {\n}\n",
\  },
\ },
\}
"}}}

" vim: fdm=marker fdl=0
