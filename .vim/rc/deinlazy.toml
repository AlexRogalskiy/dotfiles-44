# ===== Completion ===== {{{
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
  let g:acp_enableAtStartup = 0
  let g:neocomplete#enable_at_startup = 1
  source ~/.vim/rc/plugins/neocomplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = 'source ~/.vim/rc/plugins/neosnippet.rc.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
# Vim source for neocomplete/deoplete.
repo = 'Shougo/neco-vim'
hook_add = '''
  " Source neco-vim when CursorHoldI because it is loaded slowly.
  function! s:source_neco_vim()
    if &ft ==# 'vim' && !dein#is_sourced('neco-vim')
      call dein#source('neco-vim')
    endif
    augroup SourceNecoVimAu
      autocmd!
    augroup END
    augroup! SourceNecoVimAu
  endfunction
  augroup SourceNecoVimAu
    autocmd!
    autocmd CursorHoldI * call s:source_neco_vim()
  augroup END
'''

[[plugins]]
# Include completion framework for neocomplete/deoplete.
repo = 'Shougo/neoinclude.vim'
on_source = ['neocomplete.vim']

[[plugins]]
# Syntax source for neocomplete/deoplete.
repo = 'Shougo/neco-syntax'
on_source = ['neocomplete.vim']

[[plugins]]
# A completion plugin for /usr/bin/look for completing words in English.
repo = 'ujihisa/neco-look'
on_source = ['neocomplete.vim']

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
on_ft = 'java'
hook_source = '''
  autocmd MyAutoCmd FileType java setlocal omnifunc=javacomplete#Complete
'''

[[plugins]]
# Tern-based JavaScript editing support.
# Tern uses .tern-project files to configure loading libraries and plugins for a project.
# $ cd ~/.vim/dein/repos/github.com/ternjs/tern_for_vim && npm install
# http://ternjs.net/doc/manual.html
repo = 'ternjs/tern_for_vim'
on_ft = 'javascript'
build = 'npm install'
hook_source = 'source ~/.vim/rc/plugins/tern_for_vim.rc.vim'

[[plugins]]
repo = 'shawncplus/phpcomplete.vim'
on_ft = 'php'

[[plugins]]
# Completion plugin for node.js.
# Support node's builtin module's method&property completion(ctrl-x ctrl-o) in js file with preview.
#   Close the method preview window.
#     ctrl-w_ctrl-z or :pc
#   If you modified module in node_modules directory, use code below to clear the cache.
#     :unlet b:npm_module_names
repo = 'myhere/vim-nodejs-complete'
on_ft = 'coffee'
hook_source = '''
  let g:nodejs_complete_config = {
        \ 'js_compl_fn': 'jscomplete#CompleteJS',
        \ 'max_node_compl_len': 15,
        \ }
  " Automatically open and close the popup menu / preview window.
  "au! MyAutoCmd CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
'''

[[plugins]]
# Ruby code completion with rcodetools.
#   gem install rcodetools
repo = 'osyo-manga/vim-monster'
on_ft = 'ruby'
# }}}

# ===== Vimfiler ===== {{{
[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = ['unite.vim', 'tabpagebuffer.vim']
on_if = "isdirectory(bufname('%'))"
on_map = [['n', '<Plug>']]
on_cmd = ['VimFiler', 'VimFilerExplorer', 'VimFilerCurrentDir', 'VimFilerBufferDir']
hook_add = '''
  nnoremap <silent> <Space>v  :<C-u>VimFiler -invisible<CR>'
  nnoremap <silent> <F5>      :<C-u>VimFilerExplorer -status<CR>
  nnoremap <silent> <F6>      :<C-u>VimFilerBufferDir
        \ -buffer-name=explorer -split -toggle -no-quit<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/vimfiler.rc.vim'

[[plugins]]
# Tabpage buffer interface. (Used by unite/vimfiler/vimshell.)
# It saves information in t:tabpagebuffer variable.
repo = 'Shougo/tabpagebuffer.vim'
on_if = 'tabpagenr() > 1'
# }}}

# ===== Unite ===== {{{
[[plugins]]
# Unite.
# Usage:
#   g?  Quick Help.
# https://github.com/Shougo/unite.vim
# Unite Plugins.
# https://github.com/Shougo/unite.vim/wiki/unite-plugins
repo = 'Shougo/unite.vim'
depends = ['neomru.vim', 'tabpagebuffer.vim', 'neosnippet.vim']
on_cmd = 'Unite'
hook_source = '''
  source ~/.vim/rc/plugins/unite.rc.vim
  source ~/.vim/rc/plugins/unite/unite-menu.rc.vim
'''
hook_add = '''
  " The prefix key.
  nnoremap    [unite]   <Nop>
  xnoremap    [unite]   <Nop>
  nmap    ;f   [unite]
  xmap    ;f   [unite]
  " === Mappinigs <Space> ===
  " Files.
  nnoremap <silent> <Space>ff
        \ :<C-u>Unite -buffer-name=files -winheight=30 -multi-line -unique
        \ jump_point file_point file_mru
        \ `finddir('.git', ';') != '' ? 'file_rec/git' : ''`
        \ buffer_tab:- file file/new<CR>

  nnoremap <silent> <Space>fc  :<C-u>UniteWithCurrentDir
        \ -buffer-name=files buffer bookmark file<CR>

  nnoremap <silent> <space>fb  :<C-u>UniteWithBufferDir
        \ -buffer-name=files buffer bookmark file<CR>

  " === Mappinigs [unite] ===
  " Build.
  nnoremap <silent> [unite]b
        \ :<C-u>Unite -buffer-name=build`tabpagenr()` -no-quit build<CR>

  " Change jump.
  nnoremap <silent> [unite]c
        \ :<C-u>Unite -buffer-name=Change-jump change jump<CR>

  " Dein.
  "   :Unite dein:!  Show verbose status
  nnoremap <silent> [unite]d
        \ :<C-u>Unite -start-insert -default-action=lcd dein<CR>

  " File type.
  nnoremap <silent> [unite]ft
        \ :<C-u>Unite -start-insert filetype filetype/new<CR>

  " Folding.
  nnoremap <silent> [unite]fd
        \ :<C-u>Unite outline:folding<CR>

  " Grep.
  nnoremap <silent> [unite]g
        \ :<C-u>Unite grep -buffer-name=grep`tabpagenr()`
        \ -auto-preview -no-split -no-empty -resume<CR>

  " Help.
  nnoremap <silent> [unite]hh  :<C-u>Unite -buffer-name=help help<CR>
  " Help by cursor keyword.
  nnoremap <silent> [unite]hk  :<C-u>UniteWithCursorWord -buffer-name=help help<CR>
  " Help Plugin.
  nnoremap <silent> [unite]hp  :<C-u>Unite -wrap
        \ -buffer-name=output-shellcmd
        \ output/shellcmd:find\ ~/.vim/dein/repos\ -type\ d\ -name\ doc\ -print0\ \|\ xargs\ -0\ -J\ %\ find\ %\ -type\ f<CR>

  " History Command.
  nnoremap <silent> [unite]hc
        \ :<C-u>Unite -buffer-name=history-command history/command<CR>

  " History Search.
  nnoremap <silent> [unite]hs
        \ :<C-u>Unite -buffer-name=history-search history/search<CR>

  " Junkfile.   (~/.cache/junkfile)
  nnoremap <silent> [unite]j :<C-u>Unite junkfile/new junkfile -start-insert<CR>

  " Mapping.
  nnoremap <silent> [unite]ma
          \ :<C-u>Unite -buffer-name=mapping mapping<CR>

  " Message.
  nnoremap <silent> [unite]me
          \ :<C-u>Unite -buffer-name=message output:message<CR>

  " Menu.
  nnoremap <silent> [unite]mm
          \ :<C-u>Unite -buffer-name=menu -no-start-insert -resume menu<CR>

  " Neosnippet.
  nnoremap <silent> [unite]ns
        \ :<C-u>Unite -buffer-name=neosnippet
        \ neosnippet/user neosnippet/runtime<CR>
  nnoremap <silent> [unite]nn
        \ :<C-u>Unite -buffer-name=neosnippet
        \ neosnippet<CR>

  " Outline.
  nnoremap <silent> [unite]o
          \ :<C-u>Unite outline -no-start-insert -resume<CR>

  " Register.
  nnoremap <silent> [unite]re
        \ :<C-u>Unite -buffer-name=register
        \ -default-action=append register history/yank<CR>
  xnoremap <silent> [unite]re
        \ d:<C-u>Unite -buffer-name=register
        \ -default-action=append register history/yank<CR>

  " Resume.
  nnoremap <silent> [unite]rl
      \ :<C-u>Unite -buffer-name=resume resume<CR>
  nnoremap <silent> [unite]rr
      \ :<C-u>UniteResume<CR>

  " Search.
  nnoremap <silent> [unite]/
        \ :<C-u>Unite -buffer-name=search%`bufnr('%')`
        \ -start-insert line:forward:wrap<CR>
  nnoremap <silent> [unite]?
        \ :<C-u>Unite -buffer-name=search%`bufnr('%')`
        \ -start-insert line:backward<CR>
  nnoremap <silent> [unite]*
        \ :<C-u>UniteWithCursorWord -buffer-name=search%`bufnr('%')`
        \ line:forward:wrap<CR>
  nnoremap <silent> [unite]n
        \ :<C-u>UniteResume search%`bufnr('%')`
        \  -no-start-insert -force-redraw<CR>

  " Source.
  nnoremap <silent> [unite]s
          \ :<C-u>Unite -buffer-name=source source<CR>

  " Tab pages.
  nnoremap <silent> [unite]tp
        \ :<C-u>Unite -auto-resize -select=`tabpagenr()-1` tab<CR>

  " Tag jump.
  nnoremap <silent><expr> [unite]tt  &filetype == 'help' ?  "g\<C-]>" :
        \ ":\<C-u>UniteWithCursorWord -buffer-name=tag -immediately
        \  tag tag/include\<CR>"
  nnoremap <silent><expr> [unite]tj  &filetype == 'help' ?
        \ ":\<C-u>pop\<CR>" : ":\<C-u>Unite jump\<CR>"
  nnoremap <silent> [unite]ts :<C-u>NeoCompleteIncludeMakeCache<CR>
        \ :UniteWithCursorWord -immediately -sync
        \ -default-action=context_split tag/include<CR>

  " YankRound.
  nnoremap <silent> [unite]y
        \ :<C-u>Unite -buffer-name=yankround yankround<CR>
  xnoremap <silent> [unite]y
        \ :<C-u>Unite -buffer-name=register yankround<CR>

  " Window.
  nnoremap <silent> [unite]w
        \ :<C-u>Unite -force-immediately window:all:no-current<CR>

  nnoremap <silent> <Space>n  :UniteNext<CR>
  nnoremap <silent> <Space>p  :UnitePrevious<CR>

  " View ~/dtofiles.
  command! Ufd :Unite -buffer-name=files -input=. -path=~/dotfiles file_rec<CR>
'''

[[plugins]]
repo = 'Shougo/unite-build'
on_source = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-filetype'
on_source = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-font'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-help'
on_source = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'ujihisa/unite-locate'
on_source = 'unite.vim'

[[plugins]]
repo = 'tacroe/unite-mark'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-sudo'
on_source = 'unite.vim'

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = 'unite.vim'

[[plugins]]
repo = 'Kocha/vim-unite-tig'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-vimpatches'
on_source = 'unite.vim'

[[plugins]]
repo = 'pasela/unite-webcolorname'
on_source = 'unite.vim'
# }}}

# ===== Operator ===== {{{
[[plugins]]
# Escape HTML.
repo = 'tyru/operator-html-escape.vim'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
  nmap <Leader>h <Plug>(operator-html-escape)
  xmap <Leader>h <Plug>(operator-html-escape)
  nmap <Leader>H <Plug>(operator-html-unescape)
  xmap <Leader>H <Plug>(operator-html-unescape)
'''

[[plugins]]
# Operator to replace text with register content.
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
  nmap R  <Plug>(operator-replace)
  xmap R  <Plug>(operator-replace)
  xmap p  <Plug>(operator-replace)
  nmap cp <Plug>(operator-replace)iw
'''

[[plugins]]
# Operator mappings to deal with surrounds.
# Usage:
#   Add    : saiw'   hoge   -> 'hoge'
#   Delete : sda'    'hoge' -> hoge
#   Replace: sra'"   'hoge' -> "hoge"
# Usage(with multiblock):
#   Delete : sdd     'hoge' -> hoge
#   Replace: srr"    'hoge' -> "hoge"
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user', 'vim-textobj-multiblock']
on_map = '<Plug>'
hook_add = '''
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)

  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''
# }}}

# ===== txtobj ===== {{{
[[plugins]]
# Vim plugin that allows you to visually select increasingly
# larger regions of text using the same key combination.
repo = 'terryma/vim-expand-region'
on_map = '<Plug>'
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
'''
hook_source = '''
  call expand_region#custom_text_objects({
        \ 'iu'  :1,
        \ 'au'  :1,
        \ 'isb' :1,
        \ 'asb' :1,
        \ 'ii'  :0,
        \ 'ai'  :0,
        \ 'iz'  :1,
        \ 'az'  :1,
        \ 'ic'  :0,
        \ 'ac'  :0,
        \ 'iS'  :0,
        \ 'aS'  :0,
        \ 'i_'  :0,
        \ 'a_'  :0,
        \ '$h'  :0,
        \ 'g$h' :0,
        \ })
'''

[[plugins]]
# Multi textobj.
# Default Mappings: --
repo = 'osyo-manga/vim-textobj-multitextobj'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>']]
hook_add = '''
  omap amt <Plug>(textobj-multitextobj-a)
  omap imt <Plug>(textobj-multitextobj-i)
  vmap amt <Plug>(textobj-multitextobj-a)
  vmap imt <Plug>(textobj-multitextobj-i)
'''
hook_source = '''
  let g:textobj_multitextobj_textobjects_i = [
        \   '<Plug>(textobj-url-i)',
        \   [
        \     '<Plug>(textobj-parameter-i)',
        \     '<Plug>(textobj-multiblock-i)',
        \     '<Plug>(textobj-indent-i)',
        \     '<Plug>(textobj-function-i)',
        \   ],
        \   '<Plug>(textobj-entire-i)',
        \]

  let g:textobj_multitextobj_textobjects_a = [
        \   '<Plug>(textobj-url-a)',
        \   [
        \     '<Plug>(textobj-parameter-a)',
        \     '<Plug>(textobj-multiblock-a)',
        \     '<Plug>(textobj-indent-a)',
        \     '<Plug>(textobj-function-a)',
        \   ],
        \   '<Plug>(textobj-entire-a)',
        \]
'''

[[plugins]]
# textobj for comments.
# Default Mappings: ac, ic
repo = 'thinca/vim-textobj-comment'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'ac'], ['ox', 'ic']]

[[plugins]]
# textobj for entire buffer.
# Default Mappings: ae, ie
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'ae'], ['ox', 'ie']]

[[plugins]]
# textobj for foldings.
# Default Mappings: az, iz
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'az'], ['ox', 'iz']]

[[plugins]]
# textobj for functions.
# Default Mappings: af, if
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'af'], ['ox', 'if']]

[[plugins]]
# textobj for indented blocks of lines.
# Default Mappings: ai, ii, aI, iI
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'ai'], ['ox', 'ii'], ['ox', 'aI'], ['ox', 'iI']]

[[plugins]]
# textobj for the current line.
# Default Mappings: al, il
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'al'], ['ox', 'il']]

[[plugins]]
# textobj for various parentheses.
# Default Mappings: asb, isb
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'asb'], ['ox', 'isb']]
hook_add = '''
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  vmap ab <Plug>(textobj-multiblock-a)
  vmap ib <Plug>(textobj-multiblock-i)
'''
hook_post_source = '''
  call add(g:textobj_multiblock_blocks, ['```..*', '```'])
  call add(g:textobj_multiblock_blocks, ['```', '```'])
  call add(g:textobj_multiblock_blocks, ['`', '`', 1])
'''

[[plugins]]
# textobj for function parameters.
# Default Mappings: a, i,
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'a,'], ['ox', 'i,']]

[[plugins]]
# textobj for continuity spaces.
# Default Mappings: aS, iS
repo = 'saihoooooooo/vim-textobj-space'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'aS'], ['ox', 'iS']]

[[plugins]]
# textobj for URL.
# Default Mappings: au, iu
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'au'], ['ox', 'iu']]

[[plugins]]
# textobj for undersocore.
# Default Mappings: a_, i_
repo = 'lucapette/vim-textobj-underscore'
depends = 'vim-textobj-user'
on_map = [['ox', '<Plug>'], ['ox', 'a_'], ['ox', 'i_']]
# }}}

# ===== File type ===== {{{
[[plugins]]
# Insert the matching close tag at the cursor when hitting <C-_>.
repo = 'closetag.vim'
on_ft = ['html', 'xml', 'xsl', 'ant']
hook_source = 'let g:closetag_html_style = 1'

[[plugins]]
# Enable django module loading in Vim.
# Add DJANGO_SETTINGS_MODULE to enable pythoncomplete or whatever for django.
repo = 'lambdalisue/vim-django-support'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = [
  'html', 'xml', 'javascript', 'coffee', 'css', 'less',
  'scss', 'sass', 'haml', 'markdown', 'mkd'
]
hook_source = 'source ~/.vim/rc/plugins/emmet.rc.vim'

[[plugins]]
# Awesome Python autocompletion.
#   To install jedi : git submodule update --init
repo = 'davidhalter/jedi-vim'
if = "!has('nvim')"
on_ft = 'python'
hook_source = '''
  let g:jedi#auto_initialization = 1
  let g:jedi#popup_on_dot = 0
  let g:jedi#popup_select_first = 0
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#show_call_signatures = 0

  let g:jedi#goto_assignments_command = '<leader>gt'
  let g:jedi#goto_definitions_command = '<leader>d'
  let g:jedi#documentation_command = '<space>K'
  let g:jedi#rename_command = '<leader>R'
  let g:jedi#usages_command = '<leader>n'

  autocmd MyAutoCmd FileType python setlocal omnifunc=jedi#completions'
'''

[[plugins]]
# Generates JSDoc block comments based on a function signature.
# Usage:
#   :JsDoc  Insert JSDoc above the function keyword line.
repo = 'heavenshell/vim-jsdoc'
on_ft = ['html', 'javascript', 'coffee']
on_cmd = 'JsDoc'

[[plugins]]
repo = 'plasticscafe/vim-less-autocompile'
on_ft = 'less'
hook_source = '''
  let g:less_autocompile = 1
  let g:less_compress = 0
'''

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
hook_add = '''
  " Source the plugin loading slowly when CursorHold.
  function! s:source_vim_markdown_quote_syntax()
    if (&ft ==# 'markdown' || &ft ==# 'mkd') &&
          \ !dein#is_sourced('vim-markdown-quote-syntax')
      echo 'Source vim-markdown-quote-syntax.'
      call dein#source('vim-markdown-quote-syntax')
    endif
    augroup SourceMarkdownQuoteSyntaxAu
      autocmd!
    augroup END
    augroup! SourceMarkdownQuoteSyntaxAu
  endfunction
  augroup SourceMarkdownQuoteSyntaxAu
    autocmd!
    autocmd CursorHold * call s:source_vim_markdown_quote_syntax()
  augroup END
'''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
# Python multifunctional plugin.
#  Including pylint, rope, pydoc, pyflakes, pep8, autopep8, pep257
#  and mccabe for features like static analysis, refactoring, folding,
#  completion, documentation, and more.
#  https://github.com/klen/python-mode
#  :help PythonModeOptions
#  :help PythonModeKeys
#  :help ropevim.txt
repo = 'klen/python-mode'
on_ft = 'python'
hook_source = 'source ~/.vim/rc/plugins/python-mode.rc.vim'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_map = '<Plug>'
on_ft = 'ruby'

[[plugins]]
# Highlight local variables in Ruby files.
repo = 'todesking/ruby_hl_lvar.vim'
on_ft = 'ruby'

[[plugins]]
# :SassCompile    Compile the current file according to config.rb.
# :CompassConfig  Edit compas config file (config.rb).
repo = 'AtsushiM/sass-compile.vim'
on_ft = 'sass'

[[plugins]]
repo = 'jiangmiao/simple-javascript-indenter'
on_ft = 'javascript'
hook_source = '''
  " Use Brief Mode to indent on shiftwidth=1.
  let g:SimpleJsIndenter_BriefMode = 1
  " Improve switch/case syntax.
  let g:SimpleJsIndenter_CaseIndentLevel = -1
'''

[[plugins]]
# Activate a python virtualenv within Vim.
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python', 'python3', 'djangohtml']
# }}}

# ===== Move ===== {{{
[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = [['n', '<Plug>']]
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
  nmap gj j
  nmap gk k
'''

[[plugins]]
# clever-f.vim extends f, F, t and T mappings for more convenience.
# This extension makes a repeat easier and makes you forget the existence of ;.
#   f{char}: Find {char} to the right.
#   F{char}: Find {char} to the left.
#   t{char}: Find {char} to the right.
#   T{char}: Find {char} to the left.
#   f<CR>  : Find repeat.
repo = 'rhysd/clever-f.vim'
on_map = ['<Plug>', 'f', 'F', 't', 'T']
hook_source = ''''
  let g:clever_f_smart_case = 1
  let g:clever_f_fix_key_direction = 1
  let g:clever_f_show_prompt = 1
'''

[[plugins]]
# EasyMotion.
#  - http://haya14busa.com/mastering-vim-easymotion/
#  - http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/
# MotionKeys: asdghklqwertyuiopzxcvbnmfj;  (Default)
# Default Mappings:
#   <Plug>(easymotion-prefix) | <Leader><Leader>
#   <Plug>(easymotion-f)      | f{char}
#   <Plug>(easymotion-F)      | F{char}
#   <Plug>(easymotion-t)      | t{char}
#   <Plug>(easymotion-T)      | T{char}
#   <Plug>(easymotion-w)      | w
#   <Plug>(easymotion-W)      | W
#   <Plug>(easymotion-b)      | b
#   <Plug>(easymotion-B)      | B
#   <Plug>(easymotion-e)      | e
#   <Plug>(easymotion-E)      | E
#   <Plug>(easymotion-ge)     | ge
#   <Plug>(easymotion-gE)     | gE
#   <Plug>(easymotion-j)      | j
#   <Plug>(easymotion-k)      | k
#   <Plug>(easymotion-n)      | n
#   <Plug>(easymotion-N)      | N
#   <Plug>(easymotion-s)      | s
#
# Custom Mappings:
#   <Plug>(easymotion-bd-f2)      | s
#   <Plug>(easymotion-overwin-f2) | <Space><Space>
#
#   <Plug>(easymotion-overwin-line) | l
#   <Plug>(easymotion-bd-jk)        | l
#   <Plug>(easymotion-bd-jk)        | l
#   <Plug>(easymotion-eol-bd-jk)    | L
#
#   <Plug>(easymotion-bd-fn) | /
#   <Plug>(easymotion-bd-fn) | /
#   <Plug>(easymotion-bd-fn) | /
#
#   <Plug>(easymotion-repeat) | <Space>
#   <Plug>(easymotion-repeat) | <CR>
#
#   <Plug>(easymotion-next) | <C-n>
#   <Plug>(easymotion-prev) | <C-p>
#
# Last Find Motion:         | f<CR>or s<CR>
# Jump Fisrt:               | f{char} or s{char}{char} <CR>or<Space>
# Etc:
#   bidirection (*-bd-*)    | Find {char} to forward and backward at the same time.
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>'
hook_add = '''
  let g:EasyMotion_add_search_history = 0
  let g:EasyMotion_smartcase = 1

  " Jump to first match with enter & space
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1

  " 2-character search motion.
  " s{char}{char} to move to {char}{char}
  map  <Space><Space>    <Plug>(easymotion-bd-f2)
  nmap <Leader><Leader>s <Plug>(easymotion-overwin-f2)

  " Move to line.
  map <Leader><Leader>l <Plug>(easymotion-bd-jk)
  map <Leader><Leader>L <Plug>(easymotion-eol-bd-jk)

  " n-character search motion.
  " `<Tab>` & `<S-Tab>` to scroll up/down a page of next match.
  nmap <Leader><Leader>/ <Plug>(easymotion-bd-fn)
  xmap <Leader><Leader>/ <Plug>(easymotion-bd-fn)
  omap <Leader><Leader>/ <Plug>(easymotion-bd-fn)

  " Repeat last motion.
  map <Leader><Leader><Space> <Plug>(easymotion-repeat)
  map <Leader><Leader><CR>    <Plug>(easymotion-repeat)

  " Jump to next/previous match.
  map <Leader><Leader><C-n> <Plug>(easymotion-next)
  map <Leader><Leader><C-p> <Plug>(easymotion-prev)
'''

[[plugins]]
# Change WORD motion(E,W,B) for Japanese text using TinySegmenter.
repo = 'deton/jasegment.vim'
on_map = ['<Plug>', 'W', 'B', 'E']

[[plugins]]
# Make blockwise Visual mode more useful.
repo = 'kana/vim-niceblock'
on_map = [['x', '<Plug>']]
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''
# }}}

# ===== Edit ===== {{{
[[plugins]]
# A simple, easy-to-use Vim alignment plugin.
# Usage:
#   Select with Visual mode > :EasyAlign > * > <Space>
repo = 'junegunn/vim-easy-align'
on_cmd = 'EasyAlign'

[[plugins]]
# Vim comment plugin.
# Supported operator/non-operator mappings,
# repeatable by dot-command, 300+ filetypes, fast.
# Usage:
#   gc    |<Plug>(caw:prefix)|
#   gcc   |<Plug>(caw:hatpos:toggle)|
#   gci   |<Plug>(caw:hatpos:comment)|
#   gcui  |<Plug>(caw:hatpos:uncomment)|
#   gcI   |<Plug>(caw:zeropos:comment)|
#   gcuI  |<Plug>(caw:zeropos:uncomment)|
#   gca   |<Plug>(caw:dollarpos:comment)|
#   gcua  |<Plug>(caw:dollarpos:uncomment)|
#   gcw   |<Plug>(caw:wrap:comment)|
#   gcuw  |<Plug>(caw:wrap:uncomment)|
#   gcb   |<Plug>(caw:box:comment)|
#   gco   |<Plug>(caw:jump:comment-next)|
#   gcO   |<Plug>(caw:jump:comment-prev)|
repo = 'tyru/caw.vim'
on_map = [['nx', '<Plug>'], ['nx', 'gc']]

[[plugins]]
# Join with specified delimiters.
repo = 'osyo-manga/vim-jplus'
on_map = [['nx', '<Plug>']]
hook_add = '''
  " Join text seme as |J| considering line-continuation.
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
  " Join text with input().
  nmap <Leader>J <Plug>(jplus-input)
  vmap <Leader>J <Plug>(jplus-input)
'''
hook_source = '''
" Input 'd' : Join with a space either side of delimiters.
" Input ''  : Join without spaces.
" Input ',' : Join with ', '.
  let g:jplus#input_config = {
        \ '__DEFAULT__' : {
        \   'delimiter_format' : ' %d '
        \ },
        \ '__EMPTY__' : {
        \   'delimiter_format' : '%d'
        \ },
        \ ',' : {
        \   'delimiter_format' : '%d '
        \ },
        \ }
'''

[[plugins]]
# Deleting, changing, and adding "surroundings".
#   Add:       ysiw(  ysiW"  ys2aw(
#   Delete:    ds[
#   Replace:   cs["  cs"B
#   Tag:       dst  cst
#   Replace on Visual mode:  "S" on Visual mode.
#   (If s is used, a leading but not trailing space is added.)
repo = 'tpope/vim-surround'
on_map = ['<Plug>', ['n', 'ys'], ['n', 'cs'], ['n', 'ds'], ['v', 'S']]

[[plugins]]
# Switch segments of text with predefined replacements.
repo = 'AndrewRadev/switch.vim'
on_cmd = 'Switch'
on_map = 'gs'
hook_source = '''
  let g:switch_custom_definitions =
    \ [
    \   ['and', 'or'],
    \   ['if', 'unless'],
    \   ['yes', 'no'],
    \   ['enable', 'disable'],
    \   ['pick', 'reword', 'fixup', 'squash', 'edit', 'exec'],
    \   {
    \     '\<[a-z0-9]\+_\k\+\>': {
    \       '_\(.\)': '\U\1',
    \     },
    \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
    \       '\([A-Z]\)': '_\l\1',
    \     },
    \   },
    \ ]
'''
# }}}

# ===== Search ===== {{{
[[plugins]]
# The silver searcher (ag).
#   :Ag [options] {pattern} [{directory}]
#   :bufdo AgAdd {pattern}
#   :LAg, LAgAdd
#   :AgFile
#   :AgHelp
# In the quickfix window, you can use:
#   o    to open (same as enter)
#   go   to preview file (open but maintain focus on ack.vim results)
#   t    to open in new tab
#   T    to open in new tab silently
#   h    to open in horizontal split
#   H    to open in horizontal split silently
#   v    to open in vertical split
#   gv   to open in vertical split silently
#   q    to close the quickfix window
repo = 'rking/ag.vim'
on_cmd = 'Ag'
hook_source = '''
  let g:agprg = 'ag -S --nogroup --column'
'''

[[plugins]]
# Displays current search location on status-line or command-line.
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  nmap <silent><expr> n  '<Plug>(anzu-n):normal! zz<CR><Plug>(anzu-update-search-status-with-echo)'
  nmap <silent><expr> N  '<Plug>(anzu-N):normal! zz<CR><Plug>(anzu-update-search-status-with-echo)'
  nmap <silent><expr> *  '<Plug>(anzu-star):normal! Nzz<CR><Plug>(anzu-update-search-status-with-echo)'
  nmap <silent><expr> #  '<Plug>(anzu-sharp):normal! Nzz<CR><Plug>(anzu-update-search-status-with-echo)'
  nmap <silent><expr> g* 'g*:normal! N<CR><Plug>(anzu-update-search-status-with-echo)'
  nmap <silent><expr> g# 'g#:normal! N<CR><Plug>(anzu-update-search-status-with-echo)'
'''

[[plugins]]
# :Grep/GrepAdd/Rgrep/RgrepAdd
#  - Search for the specified pattern in the specified files
# :GrepBuffer/GrepBufferAdd/(Bgrep/BgrepAdd)
#  - Search for a pattern on all open buffers
# :GrepArgs/GrepArgsAdd
#  - Search for a pattern on all the Vim argument filenames (:args)
# :Fgrep/FgrepAdd/RFgrep/RFgrepAdd
#  - Run fgrep
# :Egrep/EgrepAdd/REgrep/REgrepAdd
#  - Run egrep
# :Agrep/AgrepAdd/RAgrep/RAgrepAdd
#  - Run agrep
# :XxxAdd
#  - Same as ":XxxAdd" but adds the results to the current results
# :Rxxx
#  - Run recuresive xxx
repo = 'grep.vim'
on_cmd = [
  'Grep', 'GrepAdd', 'Rgrep', 'RgrepAdd', 'GrepBuffer',
  'GrepBufferAdd', 'Bgrep', 'BgrepAdd', 'GrepArgs',
  'GrepArgsAdd', 'Fgrep', 'FgrepAdd', 'Rfgrep',
  'RfgrepAdd', 'Egrep', 'EgrepAdd', 'Regrep',
  'RegrepAdd', 'Agrep', 'AgrepAdd', 'Ragrep', 'RagrepAdd'
]
hook_source = '''
  " Error occurs if use xargs on Mac.
  if has('mac')
    if executable('gxargs')
      let Grep_Xargs_Path = 'gxargs'
    else
      let Grep_Find_Use_Xargs = 0
    endif
  endif
  let Grep_Default_Options = '-niE'

  " Specifies the list of directories to skip while doing recursive searches.
  let Grep_Skip_Dirs = 'RCS CVS SCCS .svn .git .hg'
  " Specifies the list of files to skip while doing recursive searches.
  let Grep_Skip_Files = '*.bak *~'
'''

[[plugins]]
# True Sublime Text style multiple selections for Vim
repo = 'terryma/vim-multiple-cursors'
on_cmd = 'MultipleCursorsFind'
hook_source = '''
  let g:multi_cursor_use_default_mapping = 0
'''

[[plugins]]
# Search your selection text in Visual-mode.
repo = 'thinca/vim-visualstar'
on_map = [['x', '<Plug>']]
hook_add = '''
  xmap <silent><expr> *  '<Plug>(visualstar-*):normal! Nzz<CR><Plug>(anzu-update-search-status-with-echo)'
  xmap <silent><expr> #  '<Plug>(visualstar-#):normal! Nzz<CR><Plug>(anzu-update-search-status-with-echo)'
  xmap <silent><expr> g* '<Plug>(visualstar-g*):normal! Nzz<CR><Plug>(anzu-update-search-status-with-echo)'
  xmap <silent><expr> g# '<Plug>(visualstar-g#):normal! Nzz<CR><Plug>(anzu-update-search-status-with-echo)'
'''

[[plugins]]
# Replace with highlight preview.
repo = 'osyo-manga/vim-over'
on_cmd = [
  'OverCommandLine', 'OverCommandLineNoremap',
  'OverCommandLineCursor', 'OverCommandLineCursorInsert'
]
hook_add = '''
  " Replace with searching text.
  noremap <Leader>ov :<C-u>OverCommandLine %s/<C-r>=substitute('<C-r>/', '^\\v\\|^\\<\\|\\>$', "", "g")<CR>/<CR>
'''
hook_source = '''
  let g:over#command_line#paste_escape_chars = '/.*$^~'
  let g:over#command_line#paste_filters = {
    \  "\n" : '\\n',
    \  "\r" : '\\r',
    \}
'''

[[plugins]]
# Perform the replacement in quickfix.
repo = 'thinca/vim-qfreplace'
on_ft = ['unite', 'quickfix']
hook_source = '''
  autocmd MyAutoCmd FileType qf nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''
# }}}

# ===== Yank ===== {{{
[[plugins]]
# Interface to yank concealed text.
repo = 'chikatoike/concealedyank.vim'
on_map = [['x', '<Plug>(operator-concealedyank)']]

[[plugins]]
# Provide a pseudo |clipboard| register for
# several versions of Vim without |+clipboard| support, especially for non-GUI
# version of Vim on the following platforms. (also work on tmux/screens)
repo = 'kana/vim-fakeclip'
on_map = [['nv', '<Plug>']]
if = "!has('mac')"

[[plugins]]
# Yank.
# :Unite yankround
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
on_source = 'unite.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
  nmap <Leader>y :<C-u>Unite yankround
'''
hook_source = '''
  let g:yankround_dir = '~/.cache/yankround'
  let g:yankround_max_history	= 100
  let g:yankround_use_region_hl = 1
'''
# }}}

# ===== Buffer/Window/Tab ===== {{{
[[plugins]]
# Land on window you choose like tmux's 'display-pane'.
repo = 't9md/vim-choosewin'
on_map = [['n', '<Plug>']]
hook_add = '''
  nmap <C-w>gw  <Plug>(choosewin)
  let g:choosewin_overlay_enable = 1
  let g:choosewin_overlay_clear_multibyte = 1
  let g:choosewin_blink_on_land = 0
'''

[[plugins]]
# Turn :cd into :tabpagecd, to use one tab page per project.
repo = 'kana/vim-tabpagecd'
on_source = 'unite.vim'

[[plugins]]
# A thumbnail-style buffer selector for Vim.
repo = 'itchyny/thumbnail.vim'
on_cmd = 'Thumbnail'
hook_add = '''
  nnoremap <silent> <Leader>T :<C-u>Thumbnail -horizontal -below<CR>
'''
# }}}

# ===== Browser ===== {{{
[[plugins]]
# Reflesh your browser. this plugin works only MacOSX.
# http://d.hatena.ne.jp/tell-k/20110606/1307369935
repo = 'tell-k/vim-browsereload-mac'
if = "has('mac')"
on_cmd = ['ChromeReload', 'ChromeReloadStart', 'ChromeReloadStop']
hook_source = '''
  if !empty($ITERM_PROFILE)
    let g:returnApp = 'iTerm'
  elseif has('gui_running')
    let g:returnApp = 'MacVim'
  endif
'''

[[plugins]]
# Open URI with your favorite browser from your most favorite editor.
repo = 'tyru/open-browser.vim'
depends = 'vim-operator-user'
on_map = [['n', '<Plug>'], ['n', '<Plug>(openbrowser-']]
on_cmd = ['OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch', 'OpenBrowserGithub']
hook_add = '''
  " If it looks like URI, open an URI under cursor.
  " Otherwise, search a word under cursor.
  nmap <Leader>ob <Plug>(openbrowser-smart-search)
  vmap <Leader>ob <Plug>(openbrowser-smart-search)

  " Search the input word with the browser
  nmap <Leader>gs <Plug>(open-browser-wwwsearch)

  " Open Github page of dein repo under the cursor.
  " http://deris.hatenablog.jp/entry/2013/07/05/023835
  nmap <Leader>gz <Plug>(open-browser-dein-repo)

  " Open Github page of selected repository.
  command! -range OpenBrowserGithub :<C-u>call ExecuteWithSelectedText('OpenBrowser https://github.com/%s')
'''
hook_source = 'source ~/.vim/rc/plugins/open-browser.rc.vim'

[[plugins]]
# Opens current files URL in github.com
#   :OpenGithubFile
# Opens current files highlighted place in github.com
#   :'<,'>OpenGithubFile
# Opens a specific file in github.com
#   :OpenGithubFile PATH/TO/FILE
#
# Opens current repositories Issue #1
#   :OpenGithubIssue 1
# Opens a specific repositories Issue #1
#   :OpenGithubIssue 1 tyru/open-browser.vim
# Opens current repositories Issue List
#   :OpenGithubIssue
# Opens a specific repositories Issue list
#   :OpenGithubIssue tyru/open-browser.vim
#
# ※ OpenGithubPullReq is used in the same manner as :OpenGithubIssue.
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq']

[[plugins]]
# Realtime preview by Vim. (Markdown, reStructuredText, textile)
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'yuratomo/w3m.vim'
on_cmd = 'W3m'
# }}}

# ===== Git ===== {{{
[[plugins]]
# Git (used for statusline to display branch)
# http://d.hatena.ne.jp/cohama/20120317/1331978764
# http://yuku-tech.hatenablog.com/entry/20110427/1303868482
#   :Git [args]             Run an arbitrary git command.
#   :Git! [args]            Like |:Git|, but capture the output into a temp file,and edit that temp file.
#   :Gcd [directory]        |:cd| relative to the repository.
#   :Glcd [directory]       |:lcd| relative to the repository.
#   :Gstatus                Bring up the output of git-status in the preview window.(* mappings: help fugitive)
#   :Gcommit [args]         A wrapper around git-commit.
#   :Gmerge [args]          Calls git-merge and loads errors and conflicted files into the quickfix list.
#   :Gpull [args]           Like |:Gmerge|, but for git-pull.
#   :Gpush [args]           Invoke git-push, load the results into the quickfix list, and invoke |:cwindow| to reveal any errors.
#   :Gfetch [args]          Like |:Gpush|, but for git-fetch.
#   :Ggrep[!] [args]        |:grep|[!] with git-grep as 'grepprg'.
#   :Glgrep[!] [args]       |:lgrep|[!] with git-grep as 'grepprg'.
#   :Glog [args]            Load all previous revisions of the current file into the quickfix list.
#   :{range}Glog [args]     Use git-log -L to load previous revisions of the given range of the current file into the quickfix list.
#   :Gllog [args]           Like |:Glog|, but use the location list instead of the quickfix list.
#   :Gedit [revision]       |:edit| a |fugitive-revision|.
#   :Gsplit [revision]      |:split| a |fugitive-revision|.
#   :Gvsplit [revision]     |:vsplit| a |fugitive-revision|.
#   :Gtabedit [revision]    |:tabedit| a |fugitive-revision|.
#   :Gpedit [revision]      |:pedit| a |fugitive-revision|.
#   :Gread [revision]       Empty the buffer and |:read| a |fugitive-revision|.
#   :Gwrite                 Write to the current file's path and stage the results.
#   :Gwrite {path}          You can give |:Gwrite| an explicit path of where in the work tree to write.
#   :Gwq [path]             Like |:Gwrite| followed by |:quit| if the write succeeded.
#   :Gdiff [revision]       Perform a |vimdiff| against the current file in the given revision.
#   :Gsdiff [revision]      Like |:Gdiff|, but always split horizontally.
#   :Gvdiff [revision]      Like |:Gdiff|, but always split vertically.
#   :Gmove {destination}    Wrapper around git-mv that renames the buffer afterward.
#   :Gremove                Wrapper around git-rm that deletes the buffer afterward.
#   :Gblame [flags]         Run git-blame on the file and open the results in a scroll bound vertical split.(* mappings: help fugitive)
#   :[range]Gblame [flags]  Run git-blame on the given range.
#   :Gbrowse                Open the current file, blob, tree, commit, or tag in your browser at the upstream hosting provider.
#   :Gbrowse {revision}     Like :Gbrowse, but for a given |fugitive-revision|.  A
#   :Gbrowse [...]@{remote} Force using the given remote rather than the remote for the current branch.
#   :{range}Gbrowse [args]  Appends an anchor to the URL that emphasizes the selected lines.
#   :[range]Gbrowse! [args] Like :Gbrowse, but put the URL on the clipboard rather than opening it.
#   :Git now                git-now
repo = 'tpope/vim-fugitive'
on_idle = 1
hook_post_source = '''
  call fugitive#detect(expand('%:p'))
'''

[[plugins]]
# Shows a git diff in the gutter (sign column) and stages/undoes hunks.
#   ]c  jump to next hunk (change).
#   [c  jump to previous hunk (change).
repo = 'airblade/vim-gitgutter'
on_idle = 1
hook_source = '''
  let g:gitgutter_sign_added = '+'
  let g:gitgutter_sign_modified = '*'
  let g:gitgutter_sign_removed = '_'
  let g:gitgutter_sign_modified_removed = '✔'
'''

[[plugins]]
# 'gitk clone' plugin for the text editor Vim.
# :Gitv, :Gitv --all, :Gitv!
repo = 'gregsexton/gitv'
on_cmd = 'Gitv'
hook_source = 'source ~/.vim/rc/plugins/gitv.rc.vim'

[[plugins]]
# Git-vim.
repo = 'motemen/git-vim'
on_cmd = [ 'GitAdd', 'GitCommit', 'GitStatus', 'GitLog', 'GitCheckout',
          'GitDiff', 'GitPull', 'GitPullRebase', 'GitPush', 'GitCatFile',
          'Git', 'GitVimDiffMerge', 'GitVimDiffMergeDone',
          'GitLogViewer', 'Glv']
hook_source = 'source ~/.vim/rc/plugins/git-vim.rc.vim'
# }}}

# ===== vim-ref ===== {{{
[[plugins]]
# Integrated reference viewer.
# Default sources:
#   clojure, erlang, man , perldoc , phpmanual , pydoc , redis , refe , rfc , webdict
# External sources:
#   https://github.com/thinca/vim-ref/wiki/sources
# Ref command:
#   :Ref [{options}] {source-name} [{query}]
#   :RefHistory
#   K  search keyword under the cursor.
#   Delete chache: :call ref#rmcache([{source-name} [, {name}]])
# ref-viewer mappings:
#   <CR>           <Plug>(ref-keyword)
#   <2-LeftMouse>  <Plug>(ref-keyword)
#   <C-]>          <Plug>(ref-keyword)
#   <C-t>          <Plug>(ref-back)
#   <C-o>          <Plug>(ref-back)
#   <C-i>          <Plug>(ref-forward)
repo = 'thinca/vim-ref'
depends = ['ref-javadoc', 'ref-sources.vim']
on_source = 'unite.vim'
on_map = [['n', '<Plug>'], ['n', 'K']]
on_cmd = ['Ref', 'RefHistory']
hook_add = '''
  silent! nmap <silent> <unique> <Leader>k <Plug>(ref-keyword)
  silent! vmap <silent> <unique> <Leader>k <Plug>(ref-keyword)
  if has('mac')
    let g:ref_man_cmd = 'man -P cat'
  endif
'''
hook_source = 'source ~/.vim/rc/plugins/ref.rc.vim'

[[plugins]]
repo = 'pekepeke/ref-javadoc'

[[plugins]]
# vim-ref source for javascript/jquery.
repo = 'mojako/ref-sources.vim'
# }}}

# ===== Syntax Checker ===== {{{
# [[plugins]]
# # Syntax checking on the fly has never been so pimp.
# # http://d.hatena.ne.jp/heavenshell/20120109/1326089510
# repo = 'scrooloose/syntastic'
# on_cmd = ['SyntasticCheck', 'SyntasticToggleMode', 'Errors']
# hook_add = '''
#   " Execute syntax check.
#   noremap <silent> <Leader>s :SyntasticCheck<CR>
#   " Toggles syntastic between active and passive mode.
#   noremap <silent> <Leader>S :SyntasticToggleMode<CR>
# '''
# hook_source = 'source ~/.vim/rc/plugins/syntastic.rc.vim'

[[plugins]]
# Asynchronous syntax checker.
#  Check syntax.
#    :WatchdogsRun
#  Check syntax with a specified checker.
#    :WatchdogsRun watchdogs_checker/g++
#  Check syntax with arguments.
#    :WatchdogsRun watchdogs_checker/g++ -cmdopt -Wall
#  Use Plugin:
#    shabadou.vim, vim-quickrun
#    vim-hier, quickfixstatus, quickfixsigns_vim
repo = 'yonchu/vim-watchdogs'
on_ft = ['python', 'html', 'javascript', 'coffee', 'perl', 'php', 'ruby', 'scss', 'sass']
hook_source = 'source ~/.vim/rc/plugins/vim-watchdogs.rc.vim'

[[plugins]]
repo = 'machakann/vim-vimhelplint'
on_cmd = 'VimhelpLint'

[[plugins]]
# for vim-watchdogs
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
# Highlight quickfix errors and location list entries in buffer.
repo = 'cohama/vim-hier'
on_cmd = ['HierStart', 'HierStop', 'HierUpdate', 'HierClear']
hook_source = '''
  let g:hier_highlight_group_qf  = 'qf_error_ucurl'
  let g:hier_highlight_group_qfw = 'qf_warning_ucurl'
'''

[[plugins]]
# Mark quickfix & location list items with signs.
repo = 'tomtom/quickfixsigns_vim'
on_cmd = [
  'QuickfixsignsSet', 'QuickfixsignsDisable', 'QuickfixsignsEnable',
  'QuickfixsignsToggle', 'QuickfixsignsSelect'
]
hook_source = '''
  let g:quickfixsigns_classes = ['qfl', 'loc', 'breakpoints']
'''

[[plugins]]
# Displays the connected error message at the bottom of the screen,
# where command line messages are displayed.
repo = 'yonchu/quickfixstatus'
on_cmd = ['QuickfixStatusEnable', 'QuickfixStatusDisable']
# }}}

# ===== etc ===== {{{
[[plugins]]
# Insert timestamp - 形式 Last Change: .
# Update time stamps automatically.
# (Enable on Vim Kaoriya by defalut.)
# Usage:
# Write a line as below (case ignored) somewhere in the first 50 lines of a buffer:
#   Last Change: .
# Command:
#   :Autodate     Manually autodate.
#   :AutodateON   Turn on autodate in current buffer (default).
#   :AutodateOFF  Turn off autodate in current buffer.
repo = 'autodate.vim'
if = "!has('kaoriya')"

[[plugins]]
# Creating non-existent directory automatically upon saving file.
repo = 'mopp/autodirmake.vim'
on_event = 'BufWritePre'

[[plugins]]
# :Capture[!] {excmd}
# If "!" was given, always create a new buffer & window.
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
# Search Dash.app from Vim.
# Usage:
#   :Dash[!] [TERM] [KEYWORD]
#   :Dash    Search for the word under the cursor in the docset corresponding
#            to the current filetype.
#   :Dash!   Search for the word under the cursor in all docsets (globally).
#
#   :DashKeywords   Shows the current buffer list of used keywords.
#   :DashKeywords! [TERM...]  Sets the preferred docsets for lookup for
#                             the current buffer, in the given order.
repo = 'rizzatti/dash.vim'
on_cmd = ['Dash', 'DashKeywords']
if = "has('mac')"

[[plugins]]
# Print documents in echo area.
repo = 'Shougo/echodoc.vim'
on_event = 'InsertCharPre'
hook_add = 'let g:echodoc_enable_at_startup = 1'

[[plugins]]
# EditorConfig. * Slowly *
#   :EditorConfigReload   Reload the EditorConfig conf files.
repo = 'editorconfig/editorconfig-vim'
if = "has('python')"
on_if = "!empty(findfile('.editorconfig', fnameescape(fnamemodify(expand('%:p'), ':h')) . ';'))"
on_ft = 'dosini'
on_cmd = 'EditorConfigReload'
hook_source = '''
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_map = [['n', '<Plug>']]
if = "has('gui_running')"
hook_add = '''
  nmap <Leader>+ <Plug>(fontzoom-larger)
  nmap <Leader>_ <Plug>(fontzoom-smaller)
'''

[[plugins]]
# Visualize your Vim undo tree.
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'
hook_add = '''
  nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]]
# Displays unicode escape sequence and escaped URL.
#   :HideoutOn
#   :HideoutClear
#   :HideoutRefreshCache
repo = 'osyo-manga/vim-hideout'
on_cmd = 'HideoutOn'

[[plugins]]
# Show your marks using number array in color, and you can delete one # or
# all marks(now, you can replace a mark to another place).
#   mm  Make a mark, or delete it.
#   mv  Move to ahead mark.
#   mb  Move to next mark
#   m.  Moving a mark.
#   mD  Delete all marks.
repo =  'yonchu/number-marks'
on_map = '<Plug>'
hook_add = '''
  let g:number_marks_no_default_key_mappings = 1
  nmap <silent> mm <Plug>number-marks-place-sign
  nmap <silent> mb <Plug>number-marks-goto-next-sign
  nmap <silent> mv <Plug>number-marks-goto-prev-sign
  nmap <silent> m. <Plug>number-marks-move-sign
  nmap <silent> mD <Plug>number-marks-remove-all-signs
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['markdown', 'mkd', 'help']
hook_source = '''
  " Execute by quickrun.
  nmap <Space>q <Plug>(precious-quickrun-op)

  let g:precious_enable_switch_CursorMoved = {
        \   '*' : 0,
        \}
  let g:precious_enable_switch_CursorMoved_i = {
        \   '*' : 0,
        \}
  autocmd MyAutoCmd InsertEnter * PreciousSwitch
  autocmd MyAutoCmd InsertLeave * PreciousReset

  function! s:precious_leave()
    setlocal nofen
    let bf = precious#base_filetype()
    let cf = precious#context_filetype()
    echo 'Switch filetype: '.bf.' -> '.cf
  endfunction
  autocmd MyAutoCmd User PreciousFiletypeLeave_* call s:precious_leave()
  autocmd MyAutoCmd User PreciousFileType
    \ if exists(':IndentLinesReset') |
    \   execute 'IndentLinesReset' |
    \ endif
'''

[[plugins]]
# Prettyprint vim variables.
repo = 'thinca/vim-prettyprint'
on_cmd = 'PP'

[[plugins]]
# Enable remote access like ':e https://git.io/vgDtJ' without netrw.vim
repo = 'lambdalisue/vim-protocol'
on_path = '^https\?://'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = [['n', '<Plug>']]
on_cmd = ['QuickRun', 'QuickRunCancel']
hook_add = '''
  " Execute and display the result for current buffer.
  nmap <silent> <Leader>r <Plug>(quickrun)
  " Execute and move cursor to QuickFix window.
  nmap <silent> <Leader>R <Plug>(quickrun)<C-w><C-w>
  " Execute with arguments.
  command! -nargs=+ QR :QuickRun '-args' <q-args>
  " Stop quickrun forcely.
  command! -nargs=0 QuickRunCancel call s:quickrun_cancel()
  function! s:quickrun_cancel() abort
    if quickrun#is_running()
      echo 'Cancel Quickrun...'
      quickrun#sweep_sessions()
    else
      echo 'QuickRun is not running.'
    endif
  endfunction
'''
hook_source = 'source ~/.vim/rc/plugins/quickrun.rc.vim'

[[plugins]]
# Let the repeat command repeat plugin maps.
repo = 'tpope/vim-repeat'
on_map = ['<Plug>', '.']

[[plugins]]
# Restart vim.
repo = 'tyru/restart.vim'
if = "has('gui_running')"
on_cmd = 'Restart'
hook_source = '''
  command! RestartWithSession
        \ -bar
        \ let g:restart_sessionoptions = 'blank,buffers,curdir,folds,help,localoptions,tabpages'
        \ | Restart
'''

[[plugins]]
# Measures Battle Power of a vimmer.
# Usage:
#   :[range]Scouter [file-pattern] ...   Measures the Battle Power and return it.
#   :[range]Scouter! [file-pattern] ...  Name and Battle Power of all files are displayed.
# http://vim-users.jp/2009/07/hack-39/
repo = 'thinca/vim-scouter'
on_cmd = 'Scouter'

[[plugins]]
repo = 'kana/vim-submode'
on_map = [
  ['n', '<C-w>>'], ['n', '<C-w><'], ['n', '<C-w>-'], ['n', '<C-w>+'],
  ['n', '<C-t>l'], ['n', '<C-t>h'],
]
on_cmd = 'SubmodeRestoreOptions'
hook_source = 'source ~/.vim/rc/plugins/submode.rc.vim'

[[plugins]]
# Display tags of a file ordered by scope.
# Requires ctags 5.5 or higher.
# help: tagbar-usage
repo = 'majutsushi/tagbar'
on_cmd = 'TagbarToggle'

[[plugins]]
# Ultimate hex editing system with Vim.
#   :Vinarise [{:Vinarise [{options}...] [{path}]th}]...options}
#   :VinariseScript2Hex [{options}...] [{path}]
#   :VinariseHex2Script {path}
#   :VinarisePluginDump
#   :VinarisePluginViewBitmapView
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = 'let g:vinarise_enable_auto_detect = 1'
# }}}
