# map
#   '<Plug>'
#   ['mapping1', 'mapping2']
#   [['nxo', 'mapping3']]
#   mapmode (Default: 'nxo', :help map-modes)
#     nmap  Nomarl.
#     vmap  Visual/Select.
#     smap  Select.
#     xmap  Visual.
#     omap  Operator.
#     lmap  Insert、Comannd-line、Lang-Arg.
#     cmap  Command-line.

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
if = "!has('kaoriya')"
build = 'make'

[[plugins]]
repo = 'itchyny/landscape.vim'
hook_add = '''
  let g:landscape_highlight_todo = 1
  let g:landscape_highlight_full_space = 1
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/plugins/lightline.rc.vim'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
if = '(v:version == 704 && has("patch786")) || v:version >= 705'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'LeafCage/foldCC'
hook_add = '''
  set foldtext=FoldCCtext()
'''

[[plugins]]
repo = 'yonchu/accelerated-smooth-scroll'
hook_add = '''
  " let g:ac_smooth_scroll_enable_accelerating = 0
  let g:ac_smooth_scroll_skip_redraw_line_size = 2
  if has('gui_running')
    let g:ac_smooth_scroll_du_sleep_time_msec = 5
    let g:ac_smooth_scroll_fb_sleep_time_msec = 5
  else
    let g:ac_smooth_scroll_du_sleep_time_msec = 3
    let g:ac_smooth_scroll_fb_sleep_time_msec = 3
  endif
  let g:ac_smooth_scroll_min_limit_msec = 80
'''

[[plugins]]
# Trace back history of cursor position.
# jumplist とは違い、現在のウィンドウでバッファを開くのではなくて、
# 保存を行ったウィンドウの位置へカーソル位置が移動を行うことができる
#   :MilfeulleDisp    Displays jumplist.
#   :MilfeulleOverlay [{jumpername}]   Save cursor position.
#   :MilfeulleClear   Clear history.
#   :MilfeullePrev    Move previous.
#   :MilfeulleNext    Move next.
#   :MilfeulleRefresh Clear invalid history.
repo = 'osyo-manga/vim-milfeulle'
hook_add = '''
  nmap <Leader>p <Plug>(milfeulle-prev)
  nmap <Leader>n <Plug>(milfeulle-next)
'''

[[plugins]]
# Displays indent guides.
repo = 'Yggdroot/indentLine'
if = "has('conceal')"
hook_add = '''
  " let g:indentLine_faster = 1
  let g:indentLine_fileTypeExclude = [
    \   'help', 'man', 'tagbar', 'thumbnail', 'tweetvim', 'unite', 'vimfiler'
    \ ]
'''

[[plugins]]
# The fancy start screen.
#   :Startify  Open the startify buffer.
repo = 'mhinz/vim-startify'
hook_add = '''
  " Header.
  " http://deris.hatenablog.jp/entry/2013/12/15/235606
  let g:startify_custom_header = []
  let g:startify_custom_header +=
    \ map(split(system('date'), '\n'), '"   ". v:val') + ['', '']

  " Use any list of strings as indices instead of increasing numbers.
  let g:startify_custom_indices = ['f', 'g', 'h', 'r', 'o']

  " Bookmarks.
  let g:startify_bookmarks = [
    \ '~/.vimrc',
    \ '~/.zsh/.zshrc',
    \ ]

  " A list that is used to filter recently used files.
  let g:startify_skiplist = [
        \ 'COMMIT_EDITMSG',
        \ escape(fnamemodify(resolve($VIMRUNTIME), ':p'), '\') .'doc',
        \ 'vimdoc-ja/doc',
        \ 'bundle/.*/doc',
        \ 'dein/.*/doc',
        \ '\.vimgolf',
        \ '^/tmp',
        \ '\.swp$',
        \ ]
'''

[[plugins]]
# autofmt: gq
repo = 'vim-jp/autofmt'
if = "!has('kaoriya')"

[[plugins]]
# Displays signs on changed lines.
# Signs:
#   + : Added.
#   - : Deleted.
#   * : Changed.
repo = 'Changed'

[[plugins]]
# Edit/Write a file with superuser.
# Usage:
#   (command line) $ vim sudo:{filename}
#   (within vim)   :e sudo:{filename}
repo = 'sudo.vim'
hook_add = '''
  " Reopen the current file with superuser.
  command! SudoEdit :e sudo:%<CR><C-^>:bd!
  " Save the current file with superuser.
  command! SudoSave :w sudo:%
'''

# ===== File type ===== {{{
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
if = "!has('kaoriya')"

[[plugins]]
repo = 'thinca/vim-ft-diff_fold'
on_ft = 'diff'

[[plugins]]
repo = 'thinca/vim-ft-help_fold'
on_ft = 'help'
# }}}

# ===== Syntax ===== {{{
[[plugins]]
repo = 'applescript.vim'
on_ft = 'applescript'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'
# hook_add = '''
#   "autocmd MyAutoCmd BufWritePost *.coffee silent CoffeeMake! -cb | cwindow | redraw!
#   "autocmd MyAutoCmd BufWritePost *.coffee :CoffeeCompile watch vert
# '''

[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = 'cpp'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'javascript'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]]
repo = 'HybridText'
on_ft = 'hybrid'
hook_add = '''
  autocmd MyAutoCmd BufEnter,BufNewFile *
          \ if bufname('%') != '' && &filetype == ''
          \ | setlocal ft=hybrid
          \ | endif
'''

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'

[[plugins]]
# Mappings:
#   gx:  <Plug>Markdown_OpenUrlUnderCursor
#   ]]:  <Plug>Markdown_MoveToNextHeader
#   [[:  <Plug>Markdown_MoveToPreviousHeader
#   ][:  <Plug>Markdown_MoveToNextSiblingHeader
#   []:  <Plug>Markdown_MoveToPreviousSiblingHeader
#   ]c:  <Plug>Markdown_MoveToCurHeader
#   ]u:  <Plug>Markdown_MoveToParentHeader
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown', 'mkd']

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
on_ft = 'tmux'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'
on_ft = 'vim'
# }}}

# ===== Color Scheme ===== {{{
[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'w0ng/vim-hybrid'

# [[plugins]]
# repo = 'aereal/vim-magica-colors'
# }}}

# [[plugins]]
# repo = 'cocopon/iceberg.vim'
# }}}
