# map
#   '<Plug>'
#   ['mapping1', 'mapping2']
#   [['nxo', 'mapping3']]
#   mapmode (Default: 'nxo', :help map-modes)
#     nmap  Nomarl.
#     vmap  Visual/Select.
#     smap  Select.
#     xmap  Visual.
#     omap  Operator.
#     lmap  Insert、Comannd-line、Lang-Arg.
#     cmap  Command-line.

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
if = "!has('kaoriya')"
build = 'make'

[[plugins]]
repo = 'itchyny/landscape.vim'
hook_add = '''
  let g:landscape_highlight_todo = 1
  let g:landscape_highlight_full_space = 1
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/plugins/lightline.rc.vim'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
if = '(v:version == 704 && has("patch786")) || v:version >= 705'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'LeafCage/foldCC'
hook_add = '''
  set foldtext=FoldCCtext()
'''

[[plugins]]
repo = 'yonchu/accelerated-smooth-scroll'
hook_add = '''
  " let g:ac_smooth_scroll_enable_accelerating = 0
  let g:ac_smooth_scroll_skip_redraw_line_size = 2
  if has('gui_running')
    let g:ac_smooth_scroll_du_sleep_time_msec = 5
    let g:ac_smooth_scroll_fb_sleep_time_msec = 5
  else
    let g:ac_smooth_scroll_du_sleep_time_msec = 3
    let g:ac_smooth_scroll_fb_sleep_time_msec = 3
  endif
  let g:ac_smooth_scroll_min_limit_msec = 80
'''

[[plugins]]
# Trace back history of cursor position.
# jumplist とは違い、現在のウィンドウでバッファを開くのではなくて、
# 保存を行ったウィンドウの位置へカーソル位置が移動を行うことができる
#   :MilfeulleDisp    Displays jumplist.
#   :MilfeulleOverlay [{jumpername}]   Save cursor position.
#   :MilfeulleClear   Clear history.
#   :MilfeullePrev    Move previous.
#   :MilfeulleNext    Move next.
#   :MilfeulleRefresh Clear invalid history.
repo = 'osyo-manga/vim-milfeulle'
hook_add = '''
  nmap <Leader>p <Plug>(milfeulle-prev)
  nmap <Leader>n <Plug>(milfeulle-next)
'''

[[plugins]]
# Displays indent guides.
repo = 'Yggdroot/indentLine'
if = "has('conceal')"
hook_add = '''
  " let g:indentLine_faster = 1
  let g:indentLine_fileTypeExclude = [
    \   'help', 'tagbar', 'thumbnail', 'tweetvim', 'unite', 'vimfiler'
    \ ]
'''

[[plugins]]
# Git (used for statusline to display branch)
# http://d.hatena.ne.jp/cohama/20120317/1331978764
# http://yuku-tech.hatenablog.com/entry/20110427/1303868482
#   :Git [args]             Run an arbitrary git command.
#   :Git! [args]            Like |:Git|, but capture the output into a temp file,and edit that temp file.
#   :Gcd [directory]        |:cd| relative to the repository.
#   :Glcd [directory]       |:lcd| relative to the repository.
#   :Gstatus                Bring up the output of git-status in the preview window.(* mappings: help fugitive)
#   :Gcommit [args]         A wrapper around git-commit.
#   :Gmerge [args]          Calls git-merge and loads errors and conflicted files into the quickfix list.
#   :Gpull [args]           Like |:Gmerge|, but for git-pull.
#   :Gpush [args]           Invoke git-push, load the results into the quickfix list, and invoke |:cwindow| to reveal any errors.
#   :Gfetch [args]          Like |:Gpush|, but for git-fetch.
#   :Ggrep[!] [args]        |:grep|[!] with git-grep as 'grepprg'.
#   :Glgrep[!] [args]       |:lgrep|[!] with git-grep as 'grepprg'.
#   :Glog [args]            Load all previous revisions of the current file into the quickfix list.
#   :{range}Glog [args]     Use git-log -L to load previous revisions of the given range of the current file into the quickfix list.
#   :Gllog [args]           Like |:Glog|, but use the location list instead of the quickfix list.
#   :Gedit [revision]       |:edit| a |fugitive-revision|.
#   :Gsplit [revision]      |:split| a |fugitive-revision|.
#   :Gvsplit [revision]     |:vsplit| a |fugitive-revision|.
#   :Gtabedit [revision]    |:tabedit| a |fugitive-revision|.
#   :Gpedit [revision]      |:pedit| a |fugitive-revision|.
#   :Gread [revision]       Empty the buffer and |:read| a |fugitive-revision|.
#   :Gwrite                 Write to the current file's path and stage the results.
#   :Gwrite {path}          You can give |:Gwrite| an explicit path of where in the work tree to write.
#   :Gwq [path]             Like |:Gwrite| followed by |:quit| if the write succeeded.
#   :Gdiff [revision]       Perform a |vimdiff| against the current file in the given revision.
#   :Gsdiff [revision]      Like |:Gdiff|, but always split horizontally.
#   :Gvdiff [revision]      Like |:Gdiff|, but always split vertically.
#   :Gmove {destination}    Wrapper around git-mv that renames the buffer afterward.
#   :Gremove                Wrapper around git-rm that deletes the buffer afterward.
#   :Gblame [flags]         Run git-blame on the file and open the results in a scroll bound vertical split.(* mappings: help fugitive)
#   :[range]Gblame [flags]  Run git-blame on the given range.
#   :Gbrowse                Open the current file, blob, tree, commit, or tag in your browser at the upstream hosting provider.
#   :Gbrowse {revision}     Like :Gbrowse, but for a given |fugitive-revision|.  A
#   :Gbrowse [...]@{remote} Force using the given remote rather than the remote for the current branch.
#   :{range}Gbrowse [args]  Appends an anchor to the URL that emphasizes the selected lines.
#   :[range]Gbrowse! [args] Like :Gbrowse, but put the URL on the clipboard rather than opening it.
#   :Git now                git-now
repo = 'tpope/vim-fugitive'

[[plugins]]
# The fancy start screen.
#   :Startify  Open the startify buffer.
repo = 'mhinz/vim-startify'
hook_add = '''
  " Header.
  " http://deris.hatenablog.jp/entry/2013/12/15/235606
  let g:startify_custom_header = []
  let g:startify_custom_header +=
    \ map(split(system('date'), '\n'), '"   ". v:val') + ['', '']

  " Use any list of strings as indices instead of increasing numbers.
  let g:startify_custom_indices = ['f', 'g', 'h', 'r', 'o']

  " Bookmarks.
  let g:startify_bookmarks = [
    \ '~/.vimrc',
    \ '~/.zsh/.zshrc',
    \ ]

  " A list that is used to filter recently used files.
  let g:startify_skiplist = [
        \ 'COMMIT_EDITMSG',
        \ escape(fnamemodify(resolve($VIMRUNTIME), ':p'), '\') .'doc',
        \ 'vimdoc-ja/doc',
        \ 'bundle/.*/doc',
        \ 'dein/.*/doc',
        \ '\.vimgolf',
        \ '^/tmp',
        \ '\.swp$',
        \ ]
'''

[[plugins]]
# autofmt: gq
repo = 'vim-jp/autofmt'
if = "!has('kaoriya')"

[[plugins]]
# Displays signs on changed lines.
# Signs:
#   + : Added.
#   - : Deleted.
#   * : Changed.
repo = 'Changed'

[[plugins]]
# Edit/Write a file with superuser.
# Usage:
#   (command line) $ vim sudo:{filename}
#   (within vim)   :e sudo:{filename}
repo = 'sudo.vim'
hook_add = '''
  " Reopen the current file with superuser.
  command! SudoEdit :e sudo:%<CR><C-^>:bd!
  " Save the current file with superuser.
  command! SudoSave :w sudo:%
'''

# ===== File type ===== {{{
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
if = "!has('kaoriya')"

[[plugins]]
repo = 'thinca/vim-ft-diff_fold'
on_ft = 'diff'

[[plugins]]
repo = 'thinca/vim-ft-help_fold'
on_ft = 'help'
# }}}

# ===== Syntax ===== {{{
[[plugins]]
repo = 'applescript.vim'
on_ft = 'applescript'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'
# hook_add = '''
#   "autocmd MyAutoCmd BufWritePost *.coffee silent CoffeeMake! -cb | cwindow | redraw!
#   "autocmd MyAutoCmd BufWritePost *.coffee :CoffeeCompile watch vert
# '''

[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = 'cpp'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'javascript'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]]
repo = 'HybridText'
on_ft = 'hybrid'
hook_add = '''
  autocmd MyAutoCmd BufEnter,BufNewFile *
          \ if bufname('%') != '' && &filetype == ''
          \ | setlocal ft=hybrid
          \ | endif
'''

[[plugins]]
repo = 'groenewege/vim-less'
on_ft = 'less'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown', 'mkd', 'md']

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'

[[plugins]]
repo = 'zaiste/tmux.vim'
on_ft = 'tmux'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'
on_ft = 'vim'
# }}}

# ===== Color Scheme ===== {{{
[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'w0ng/vim-hybrid'

# [[plugins]]
# repo = 'aereal/vim-magica-colors'
# }}}

# [[plugins]]
# repo = 'cocopon/iceberg.vim'
# }}}
